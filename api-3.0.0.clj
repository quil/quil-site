{rotate-x
 {:args ({:value [angle], :type :both}),
  :category "Transform",
  :added "1.0",
  :name rotate-x,
  :subcategory nil,
  :type :both,
  :processing-name "rotateX()",
  :requires-bindings true,
  :link "https://processing.org/reference/rotateX_.html",
  :docstring
  "<p>Rotates a shape around the x-axis the amount specified by the <code>angle</code>\nparameter. Angles should be specified in radians (values from 0 to\n(* PI 2)) or converted to radians with the <a href=\"/api/math/trigonometry#radians\">radians</a> function. Objects\nare always rotated around their relative position to the origin and\npositive numbers rotate objects in a counterclockwise\ndirection. Transformations apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For\nexample, calling <code>(rotate-x HALF-PI)</code> and then <code>(rotate-x HALF-PI)</code> is\nthe same as <code>(rotate-x PI)</code>. If <a href=\"/api/transform#rotate-x\">rotate-x</a> is called within the draw\nfunction, the transformation is reset when the loop begins again. This\nfunction requires either the <code>:p3d</code> or <code>:opengl</code> renderer.</p>\n",
  :what :fn},
 set-uniform
 {:args #{[shader uniform-name data]},
  :category "Shader",
  :added "3.0.0",
  :name set-uniform,
  :subcategory nil,
  :type :cljs,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Set a uniform variables inside a shader to modify the effect\nwhile the program is running.</p>\n",
  :what :fn},
 print-projection
 {:args #{[]},
  :category "Lights, Camera",
  :added "1.0",
  :name print-projection,
  :subcategory "Camera",
  :type :clj,
  :processing-name "printProjection()",
  :requires-bindings true,
  :link "https://processing.org/reference/printProjection_.html",
  :docstring
  "<p>Prints the current projection matrix to std out. Useful for\ndebugging</p>\n",
  :what :fn},
 screen-height
 {:args #{[]},
  :category "Environment",
  :added "1.0",
  :name screen-height,
  :subcategory nil,
  :type :clj,
  :processing-name nil,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Returns the height of the main screen in pixels.</p>\n",
  :what :fn},
 raw-key
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name raw-key,
  :subcategory "Keyboard",
  :type :both,
  :processing-name "key",
  :requires-bindings true,
  :link "https://processing.org/reference/key.html",
  :docstring
  "<p>Contains the value of the most recent key on the keyboard that was\nused (either pressed or released).</p>\n<p>For non-ASCII keys, use the keyCode variable. The keys included in\nthe ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and\nDELETE) do not require checking to see if they key is coded, and you\nshould simply use the key variable instead of keyCode If you're\nmaking cross-platform projects, note that the ENTER key is commonly\nused on PCs and Unix and the RETURN key is used instead on\nMacintosh. Check for both ENTER and RETURN to make sure your program\nwill work for all platforms.</p>\n",
  :what :fn},
 text-char
 {:args
  ({:value [c x y z], :type :both} {:value [c x y], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-char,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "text()",
  :requires-bindings true,
  :link "https://processing.org/reference/text_.html",
  :docstring
  "<p>Draws a char to the screen in the specified position. See the\n<a href=\"/api/typography/loading-and-displaying#text\">text</a> function for more details.</p>\n",
  :what :fn},
 display-filter
 {:args
  ({:value [mode level], :type :both} {:value [mode], :type :both}),
  :category "Image",
  :added "1.0",
  :name display-filter,
  :subcategory "Pixels",
  :type :both,
  :processing-name "filter()",
  :requires-bindings true,
  :link "https://processing.org/reference/filter_.html",
  :docstring
  "<p>Originally named filter in Processing Language.\nFilters the display window with the specified mode and level.\nLevel defines the quality of the filter and mode may be one of the\nfollowing keywords:</p>\n<ul>\n<li><code>:threshold</code> - converts the image to black and white pixels depending\nif they are above or below the threshold defined by\nthe level parameter. The level must be between\n0.0 (black) and 1.0 (white). If no level is specified,\n0.5 is used.</li>\n<li><code>:gray</code>      - converts any colors in the image to grayscale\nequivalents. Doesn't work with level.</li>\n<li><code>:invert</code>    - sets each pixel to its inverse value. Doesn't work with\nlevel.</li>\n<li><code>:posterize</code> - limits each channel of the image to the number of\ncolors specified as the level parameter. The parameter can\nbe set to values between 2 and 255, but results are most\nnoticeable in the lower ranges.</li>\n<li><code>:blur</code>      - executes a Gaussian blur with the level parameter\nspecifying the extent of the blurring. If no level\nparameter is used, the blur is equivalent to Gaussian\nblur of radius 1.</li>\n<li><code>:opaque</code>    - sets the alpha channel to entirely opaque. Doesn't work\nwith level.</li>\n<li><code>:erode</code>     - reduces the light areas. Doesn't work with level.</li>\n<li><code>:dilate</code>    - increases the light areas. Doesn't work with level.</li>\n</ul>\n",
  :what :fn},
 rotate-z
 {:args ({:value [angle], :type :both}),
  :category "Transform",
  :added "1.0",
  :name rotate-z,
  :subcategory nil,
  :type :both,
  :processing-name "rotateZ()",
  :requires-bindings true,
  :link "https://processing.org/reference/rotateZ_.html",
  :docstring
  "<p>Rotates a shape around the z-axis the amount specified by the <code>angle</code>\nparameter. Angles should be specified in radians (values from 0\nto (* PI 2)) or converted to radians with the <a href=\"/api/math/trigonometry#radians\">radians</a> function.\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a counterclockwise\ndirection. Transformations apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For\nexample, calling <code>(rotate-z HALF-PI)</code> and then <code>(rotate-z HALF-PI)</code> is\nthe same as <code>(rotate-z PI)</code>. If <a href=\"/api/transform#rotate-y\">rotate-y</a> is called within the draw\nfunction, the transformation is reset when the loop begins again. This\nfunction requires either the <code>:p3d</code> or <code>:opengl</code> renderer.</p>\n",
  :what :fn},
 random-gaussian
 {:args ({:value [], :type :both}),
  :category "Math",
  :added "2.0",
  :name random-gaussian,
  :subcategory "Random",
  :type :both,
  :processing-name "randomGaussian()",
  :requires-bindings true,
  :link "https://processing.org/reference/randomGaussian_.html",
  :docstring
  "<p>Returns a <code>float</code> from a random series of numbers having a mean of 0 and\nstandard deviation of 1. Each time the <a href=\"/api/math/random#random-gaussian\">random-gaussian</a> function is called,\nit returns a number fitting a Gaussian, or normal, distribution.\nThere is theoretically no minimum or maximum value that <a href=\"/api/math/random#random-gaussian\">random-gaussian</a>\nmight return. Rather, there is just a very low probability that values far\nfrom the mean will be returned; and a higher probability that numbers near\nthe mean will be returned.</p>\n",
  :what :fn},
 blend
 {:args
  ({:value [x y width height dx dy dwidth dheight mode], :type :both}
   {:value [src-img x y width height dx dy dwidth dheight mode],
    :type :both}
   {:value
    [src-img dest-img x y width height dx dy dwidth dheight mode],
    :type :both}),
  :category "Image",
  :added "1.0",
  :name blend,
  :subcategory "Pixels",
  :type :both,
  :processing-name "blend()",
  :requires-bindings true,
  :link "https://processing.org/reference/blend_.html",
  :docstring
  "<p>Blends a region of pixels from one image into another with full alpha\nchannel support. If <code>src</code> is not specified it defaults to <a href=\"/api/environment#current-graphics\">current-graphics</a>.\nIf dest is not specified it defaults to <a href=\"/api/environment#current-graphics\">current-graphics</a>.</p>\n<p>Note: it is recommended to use the <a href=\"/api/image/rendering#blend-mode\">blend-mode</a> function instead of this one.</p>\n<p>Available blend modes are:</p>\n<ul>\n<li><code>:blend</code>      - linear interpolation of colours: C = A*factor + B</li>\n<li><code>:add</code>        - additive blending with white clip:\nC = min(A*factor + B, 255)</li>\n<li><code>:darkest</code>    - only the darkest colour succeeds:\nC = min(A*factor, B)</li>\n<li><code>:lightest</code>   - only the lightest colour succeeds:\nC = max(A*factor, B)</li>\n<li><code>:difference</code> - subtract colors from underlying image.</li>\n<li><code>:exclusion</code>  - similar to <code>:difference</code>, but less extreme.</li>\n<li><code>:multiply</code>   - Multiply the colors, result will always be darker.</li>\n<li><code>:screen</code>     - Opposite multiply, uses inverse values of the colors.</li>\n<li><code>:overlay</code>    - A mix of <code>:multiply</code> and <code>:screen</code>. Multiplies dark values\nand screens light values.</li>\n<li><code>:hard-light</code> - <code>:screen</code> when greater than 50% gray, <code>:multiply</code> when\nlower.</li>\n<li><code>:soft-light</code> - Mix of <code>:darkest</code> and <code>:lightest</code>. Works like :overlay,\nbut not as harsh.</li>\n<li><code>:dodge</code>      - Lightens light tones and increases contrast, ignores\ndarks.\nCalled &quot;Color Dodge&quot; in Illustrator and Photoshop.</li>\n<li><code>:burn</code>       - Darker areas are applied, increasing contrast, ignores\nlights. Called &quot;Color Burn&quot; in Illustrator and\nPhotoshop.</li>\n</ul>\n<p>In clj the following blend modes are also supported:\n<code>:subtract</code>   - subtractive blending with black clip:\nC = max(B - A*factor, 0)</p>\n<p>In cljs the following blend modes are also supported:\n<code>:replace</code>    - the pixels entirely replace the others and don't utilize\nalpha (transparency) values.</p>\n",
  :what :fn},
 frame-count
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.0",
  :name frame-count,
  :subcategory nil,
  :type :both,
  :processing-name "frameCount",
  :requires-bindings true,
  :link "https://processing.org/reference/frameCount.html",
  :docstring
  "<p>The system variable frameCount contains the number of frames\ndisplayed since the program started. Inside setup() the value is 0\nand after the first iteration of draw it is 1, etc.</p>\n",
  :what :fn},
 with-graphics
 {:args ({:value [graphics & body], :type :both}),
  :category "Rendering",
  :added "1.7",
  :name with-graphics,
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>All subsequent calls of any drawing function will draw on given\ngraphics. <a href=\"/api/rendering#with-graphics\">with-graphics</a> cannot be nested (you can draw simultaneously\nonly on 1 graphics)</p>\n",
  :what :macro},
 loaded?
 {:args ({:value [object], :type :both}),
  :category "Environment",
  :added "3.0.0",
  :name loaded?,
  :subcategory nil,
  :type :both,
  :processing-name nil,
  :requires-bindings false,
  :link nil,
  :docstring "<p>Returns true if object is loaded.</p>\n",
  :what :fn},
 set-image
 {:args ({:value [x y src], :type :both}),
  :category "Image",
  :added "1.0",
  :name set-image,
  :subcategory "Pixels",
  :type :both,
  :processing-name "set()",
  :requires-bindings true,
  :link "https://processing.org/reference/set_.html",
  :docstring
  "<p>Writes an image directly into the display window. The <code>x</code> and <code>y</code>\nparameters define the coordinates for the upper-left corner of the\nimage.</p>\n",
  :what :fn},
 shape-mode
 {:args #{[mode]},
  :category "Shape",
  :added "1.0",
  :name shape-mode,
  :subcategory "Loading & Displaying",
  :type :clj,
  :processing-name "shapeMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/shapeMode_.html",
  :docstring
  "<p>Modifies the location from which shapes draw. Available modes are:</p>\n<pre><code class=\"language-clojure\"> * `:corner`  - specifies the location to be the upper left corner of the\n                shape and uses the third and fourth parameters of shape\n                to specify the width and height. **(default)**\n * `:corners` - uses the first and second parameters of shape to set\n                the location of one corner and uses the third and fourth\n                parameters to set the opposite corner.\n * `:center`  - draws the shape from its center point and uses the third\n                and forth parameters of shape to specify the width and\n                height.\n</code></pre>\n",
  :what :fn},
 cursor-image
 {:args #{[img hx hy] [img]},
  :category "Environment",
  :added "1.0",
  :name cursor-image,
  :subcategory nil,
  :type :clj,
  :processing-name "cursor()",
  :requires-bindings true,
  :link "https://processing.org/reference/cursor_.html",
  :docstring
  "<p>Set the cursor to a predefined image. The horizontal and vertical\nactive spots of the cursor may be specified with <code>hx</code> and <code>hy</code>.\nIt is recommended to make the size 16x16 or 32x32 pixels.</p>\n",
  :what :fn},
 create-graphics
 {:args
  ({:value [w h renderer path], :type :clj}
   {:value [w h], :type :both}
   {:value [w h renderer], :type :both}),
  :category "Image",
  :added "1.0",
  :name create-graphics,
  :subcategory "Rendering",
  :type :both,
  :processing-name "createGraphics()",
  :requires-bindings true,
  :link "https://processing.org/reference/createGraphics_.html",
  :docstring
  "<p>Creates and returns a new <code>PGraphics</code> object of the types <code>:p2d</code>, <code>:p3d</code>,\n<code>:java2d</code>, <code>:pdf</code>. By default <code>:java2d</code> is used. Use this class if you\nneed to draw into an off-screen graphics buffer. It's not possible\nto use <a href=\"/api/image/rendering#create-graphics\">create-graphics</a> with the <code>:opengl</code> renderer, because it doesn't\nallow offscreen use. The <code>:pdf</code> renderer requires the filename parameter.</p>\n<p>Note: don't use <a href=\"/api/image/rendering#create-graphics\">create-graphics</a> in draw in clojurescript, it leaks memory.\nYou should create graphic in setup and reuse it in draw instead of creating\na new one.</p>\n<p>It's important to call any drawing commands between <code>(.beginDraw graphics)</code> and\n<code>(.endDraw graphics)</code> statements or use <a href=\"/api/rendering#with-graphics\">with-graphics</a> macro. This is also true\nfor any commands that affect drawing, such as <a href=\"/api/shape/attributes#smooth\">smooth</a> or <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>.</p>\n<p>If you're using <code>:pdf</code> renderer - don't forget to call <code>(.dispose graphics)</code>\nas last command inside <a href=\"/api/rendering#with-graphics\">with-graphics</a> macro, otherwise graphics won't be\nsaved.</p>\n<p>Unlike the main drawing surface which is completely opaque, surfaces\ncreated with <a href=\"/api/image/rendering#create-graphics\">create-graphics</a> can have transparency. This makes it\npossible to draw into a graphics and maintain the alpha channel. By\nusing save to write a <code>PNG</code> or <code>TGA</code> file, the transparency of the\ngraphics object will be honored.</p>\n",
  :what :fn},
 update-pixels
 {:args ({:value [img], :type :both} {:value [], :type :both}),
  :category "Image",
  :added "1.0",
  :name update-pixels,
  :subcategory "Pixels",
  :type :both,
  :processing-name "updatePixels()",
  :requires-bindings true,
  :link "https://processing.org/reference/updatePixels_.html",
  :docstring
  "<p>Updates the display window or image with the data in the pixels array.\nUse in conjunction with <a href=\"/api/image/pixels#pixels\">pixels</a>. If you're only reading pixels from\nthe array, there's no need to call <a href=\"/api/image/pixels#update-pixels\">update-pixels</a> unless there are\nchanges.</p>\n<p>Certain renderers may or may not seem to require <a href=\"/api/image/pixels#pixels\">pixels</a> or\n<a href=\"/api/image/pixels#update-pixels\">update-pixels</a>. However, the rule is that any time you want to\nmanipulate the <code>pixels</code> array, you must first call <a href=\"/api/image/pixels#pixels\">pixels</a>, and\nafter changes have been made, call <a href=\"/api/image/pixels#update-pixels\">update-pixels</a>. Even if the\nrenderer may not seem to use this function in the current Processing\nrelease, this will always be subject to change.</p>\n",
  :what :fn},
 text-size
 {:args ({:value [size], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-size,
  :subcategory "Attributes",
  :type :both,
  :processing-name "textSize()",
  :requires-bindings true,
  :link "https://processing.org/reference/textSize_.html",
  :docstring
  "<p>Sets the current font size. This size will be used in all\nsubsequent calls to the <a href=\"/api/typography/loading-and-displaying#text\">text</a> function. Font size is measured in\nunits of pixels.</p>\n",
  :what :fn},
 pixels
 {:args ({:value [img], :type :both} {:value [], :type :both}),
  :category "Image",
  :added "1.0",
  :name pixels,
  :subcategory "Pixels",
  :type :both,
  :processing-name "pixels[]",
  :requires-bindings true,
  :link "https://processing.org/reference/pixels.html",
  :docstring
  "<p>Array containing the values for all the pixels in the display\nwindow or image. This array is therefore the size of the display window. If\nthis array is modified, the <a href=\"/api/image/pixels#update-pixels\">update-pixels</a> function must be called to\nupdate the changes. Calls <code>.loadPixels</code> before obtaining the pixel array.</p>\n",
  :what :fn},
 font-available?
 {:args #{[font-str]},
  :category "Typography",
  :added "1.0",
  :name font-available?,
  :subcategory "Loading & Displaying",
  :type :clj,
  :processing-name nil,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Returns <code>true</code> if font (specified as a string) is available on this\nsystem, <code>false</code> otherwise</p>\n",
  :what :fn},
 constrain
 {:args ({:value [amt low high], :type :both}),
  :category "Math",
  :added "1.0",
  :name constrain,
  :subcategory "Calculation",
  :type :both,
  :processing-name "constrain()",
  :requires-bindings false,
  :link "https://processing.org/reference/constrain_.html",
  :docstring
  "<p>Constrains a value to not exceed a maximum and minimum value.</p>\n",
  :what :fn},
 reset-shader
 {:args #{[kind] []},
  :category "Rendering",
  :added "2.0",
  :name reset-shader,
  :subcategory "Shaders",
  :type :clj,
  :processing-name "resetShader()",
  :requires-bindings true,
  :link "https://processing.org/reference/resetShader_.html",
  :docstring
  "<p>Restores the default shaders. Code that runs after <a href=\"/api/rendering/shaders#reset-shader\">reset-shader</a> will\nnot be affected by previously defined shaders. Optional <code>kind</code> parameter -\ntype of shader, either <code>:points</code>, <code>:lines</code>, or <code>:triangles</code></p>\n",
  :what :fn},
 rect
 {:args
  ({:value [x y width height r], :type :both}
   {:value [x y width height], :type :both}
   {:value
    [x
     y
     width
     height
     top-left-r
     top-right-r
     bottom-right-r
     bottom-left-r],
    :type :both}),
  :category "Shape",
  :added "1.0",
  :name rect,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "rect()",
  :requires-bindings true,
  :link "https://processing.org/reference/rect_.html",
  :docstring
  "<p>Draws a rectangle to the screen. A rectangle is a four-sided shape\nwith every angle at ninety degrees. By default, the first two\nparameters set the location of the upper-left corner, the third\nsets the width, and the fourth sets the height. These parameters\nmay be changed with <a href=\"/api/shape/attributes#rect-mode\">rect-mode</a>.</p>\n<p>To draw a rounded rectangle, add a fifth parameter, which is used as\nthe radius value for all four corners. To use a different radius value\nfor each corner, include eight parameters.</p>\n",
  :what :fn},
 log
 {:args ({:value [val], :type :both}),
  :category "Math",
  :added "1.0",
  :name log,
  :subcategory "Calculation",
  :type :both,
  :processing-name "log()",
  :requires-bindings false,
  :link "https://processing.org/reference/log_.html",
  :docstring
  "<p>Calculates the natural logarithm (the base-e logarithm) of a\nnumber. This function expects the values greater than 0.0.</p>\n",
  :what :fn},
 with-stroke
 {:args ({:value [stroke & body], :type :both}),
  :category "Color",
  :added "1.7",
  :name with-stroke,
  :subcategory "Utility Macros",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Temporarily set the stroke color for the body of this macro.\nThe code outside of the <a href=\"/api/color/utility-macros#with-stroke\">with-stroke</a> form will have the previous\nstroke color set.</p>\n<p>A stroke argument of nil disables the stroke.</p>\n<p>Examples:</p>\n<pre><code class=\"language-clojure\">(with-stroke 255 ...)\n(with-stroke [10 80 98] ...)\n(with-stroke nil ...)\n</code></pre>\n",
  :what :macro},
 key-modifiers
 {:args #{[]},
  :category "Input",
  :added "2.4.0",
  :name key-modifiers,
  :subcategory "Keyboard",
  :type :clj,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Set of key modifiers that were pressed when event happened.\nPossible modifiers <code>:ctrl</code>, <code>:alt</code>, <code>:shift</code>, <code>:meta</code>. Not available in\nClojureScript.</p>\n",
  :what :fn},
 end-raw
 {:args #{[]},
  :category "Output",
  :added "1.0",
  :name end-raw,
  :subcategory "Files",
  :type :clj,
  :processing-name "endRaw()",
  :requires-bindings true,
  :link "https://processing.org/reference/endRaw_.html",
  :docstring
  "<p>Complement to <a href=\"/api/output/files#begin-raw\">begin-raw</a>; they must always be used together. See\nthe <a href=\"/api/output/files#begin-raw\">begin-raw</a> docstring for details.</p>\n",
  :what :fn},
 radians
 {:args ({:value [degrees], :type :both}),
  :category "Math",
  :added "1.0",
  :name radians,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "radians()",
  :requires-bindings false,
  :link "https://processing.org/reference/radians_.html",
  :docstring
  "<p>Converts a degree measurement to its corresponding value in\nradians. Radians and degrees are two ways of measuring the same\nthing. There are 360 degrees in a circle and 2*PI radians in a\ncircle. For example, 90Â° = PI/2 = 1.5707964. All trigonometric\nmethods require their parameters to be specified in radians.</p>\n",
  :what :fn},
 degrees
 {:args ({:value [radians], :type :both}),
  :category "Math",
  :added "1.0",
  :name degrees,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "degrees()",
  :requires-bindings false,
  :link "https://processing.org/reference/degrees_.html",
  :docstring
  "<p>Converts a radian measurement to its corresponding value in\ndegrees. Radians and degrees are two ways of measuring the same\nthing. There are 360 degrees in a circle and <code>(* 2 Math/PI)</code> radians\nin a circle. For example, <code>(= 90Â° (/ Math/PI 2) 1.5707964)</code>. All\ntrigonometric methods in Processing require their parameters to be\nspecified in radians.</p>\n",
  :what :fn},
 acos
 {:args ({:value [n], :type :both}),
  :category "Math",
  :added "1.0",
  :name acos,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "acos()",
  :requires-bindings false,
  :link "https://processing.org/reference/acos_.html",
  :docstring
  "<p>The inverse of <a href=\"/api/math/trigonometry#cos\">cos</a>, returns the arc cosine of a value. This\nfunction expects the values in the range of -1 to 1 and values are\nreturned in the range 0 to <code>Math/PI</code> (3.1415927).</p>\n",
  :what :fn},
 angle-mode
 {:args #{[mode]},
  :category "Math",
  :added "2.8.0",
  :name angle-mode,
  :subcategory "Trigonometry",
  :type :cljs,
  :processing-name "angleMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/angleMode_.html",
  :docstring
  "<p>Sets the current mode of p5 to given <code>mode</code>.\nOptions are:\n* <code>:radians</code> <strong>(default)</strong>\n* <code>:degrees</code></p>\n",
  :what :fn},
 bezier-detail
 {:args ({:value [detail], :type :both}),
  :category "Shape",
  :added "1.0",
  :name bezier-detail,
  :subcategory "Curves",
  :type :both,
  :processing-name "bezierDetail()",
  :requires-bindings true,
  :link "https://processing.org/reference/bezierDetail_.html",
  :docstring
  "<p>Sets the resolution at which Beziers display. The <strong>default</strong> value is\n20. This function is only useful when using the <code>:p3d</code> or <code>:opengl</code>\nrenderer as the default (<code>:java2d</code>) renderer does not use this\ninformation.</p>\n",
  :what :fn},
 texture
 {:args ({:value [img], :type :both}),
  :category "Shape",
  :added "1.0",
  :name texture,
  :subcategory "Vertex",
  :type :both,
  :processing-name "texture()",
  :requires-bindings true,
  :link "https://processing.org/reference/texture_.html",
  :docstring
  "<p>Sets a texture to be applied to vertex points. The <a href=\"/api/shape/vertex#texture\">texture</a> function must\nbe called between <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> and <a href=\"/api/shape/vertex#end-shape\">end-shape</a> and before any calls to\n<a href=\"/api/shape/vertex#vertex\">vertex</a>.</p>\n<p>When textures are in use, the fill color is ignored. Instead, use\n<a href=\"/api/image/loading-and-displaying#tint\">tint</a> to specify the color of the texture as it is applied to the\nshape.</p>\n",
  :what :fn},
 print-camera
 {:args #{[]},
  :category "Lights, Camera",
  :added "1.0",
  :name print-camera,
  :subcategory "Camera",
  :type :clj,
  :processing-name "printCamera()",
  :requires-bindings true,
  :link "https://processing.org/reference/printCamera_.html",
  :docstring
  "<p>Prints the current camera matrix to std out. Useful for debugging.</p>\n",
  :what :fn},
 floor
 {:args ({:value [n], :type :both}),
  :category "Math",
  :added "2.0",
  :name floor,
  :subcategory "Calculation",
  :type :both,
  :processing-name "floor()",
  :requires-bindings false,
  :link "https://processing.org/reference/floor_.html",
  :docstring
  "<p>Calculates the closest <code>int</code> value that is less than or equal to the\nvalue of the parameter. For example, <code>(floor 9.03)</code> returns the value 9.</p>\n",
  :what :fn},
 atan2
 {:args ({:value [y x], :type :both}),
  :category "Math",
  :added "1.0",
  :name atan2,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "atan2()",
  :requires-bindings false,
  :link "https://processing.org/reference/atan2_.html",
  :docstring
  "<p>Calculates the angle (in radians) from a specified point to the\ncoordinate origin as measured from the positive x-axis. Values are\nreturned as a <code>float</code> in the range from <code>PI</code> to <code>-PI</code>. The <a href=\"/api/math/trigonometry#atan2\">atan2</a> function\nis most often used for orienting geometry to the position of the\ncursor. Note: The y-coordinate of the point is the first parameter\nand the x-coordinate is the second due to the structure of\ncalculating the tangent.</p>\n",
  :what :fn},
 shader
 {:args
  ({:value [shader kind], :type :clj} {:value [shader], :type :both}),
  :category "Rendering",
  :added "2.0",
  :name shader,
  :subcategory "Shaders",
  :type :both,
  :processing-name "shader()",
  :requires-bindings true,
  :link "https://processing.org/reference/shader_.html",
  :docstring
  "<p>Applies the shader specified by the parameters. It's compatible with the <code>:p2d</code>\nand <code>:p3d</code> renderers, but not with the default <code>:java2d</code> renderer.\nIn clj mode you can pass an optional <code>kind</code> parameter that specifies\nthe type of shader, either <code>:points</code>, <code>:lines</code>, or <code>:triangles</code></p>\n",
  :what :fn},
 millis
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name millis,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "millis()",
  :requires-bindings true,
  :link "https://processing.org/reference/millis_.html",
  :docstring
  "<p>Returns the number of milliseconds (thousandths of a second) since\nstarting the sketch. This information is often used for timing\nanimation sequences.</p>\n",
  :what :fn},
 lerp-color
 {:args ({:value [c1 c2 amt], :type :both}),
  :category "Color",
  :added "1.0",
  :name lerp-color,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "lerpColor()",
  :requires-bindings true,
  :link "https://processing.org/reference/lerpColor_.html",
  :docstring
  "<p>Calculates a color or colors between two color at a specific\nincrement. The <code>amt</code> parameter is the amount to interpolate between\nthe two values where 0.0 equal to the first point, 0.1 is very near\nthe first point, 0.5 is half-way in between, etc.</p>\n",
  :what :fn},
 navigation-2d
 {:args ({:value [options], :type :both}),
  :category "Middleware",
  :added "2.2.6",
  :ns "quil.middleware",
  :name navigation-2d,
  :subcategory nil,
  :type :both,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Enables navigation over 2D sketch. Drag mouse to change the center of the\nsketch and mouse wheel controls zoom. This middleware requires fun-mode.</p>\n<p>Customization</p>\n<p>You can customize this middleware by providing map as\n:navigation-2d option in defsketch/sketch. Map can have following\noptional keys:</p>\n<p>:position - vector of 2 numbers, x and y - center of the screen.\nDefault is width/2, height/2.</p>\n<p>:zoom - number indicating current zoom level. Default is 1.</p>\n<p>Accessing position information from sketch</p>\n<p>navigation-2d uses fun-mode under the hood so all position-related\ninformation is stored in the state map. It means that you can access in\ndraw/update/any handler and modify it if you need to. Position\ninformation is a map which is stored under :navigation-2d key in the\nstate map. Position consists of 2 values: :position and :zoom.\nSee &quot;Customization&quot; section above for more details.</p>\n<p>Usage example:</p>\n<p>(q/defsketch my-sketch\n...\n:middleware [m/fun-mode m/navigation-2d])</p>\n",
  :what :fn},
 color-mode
 {:args
  ({:value [mode max], :type :both}
   {:value [mode], :type :both}
   {:value [mode max-x max-y max-z max-a], :type :both}
   {:value [mode max-x max-y max-z], :type :both}),
  :category "Color",
  :added "1.0",
  :name color-mode,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "colorMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/colorMode_.html",
  :docstring
  "<p>Changes the way Processing interprets color data. Available modes\nare <code>:rgb</code> and <code>:hsb</code> (and <code>:hsl</code> in clojurescript).\nBy default, the parameters for <a href=\"/api/color/setting#fill\">fill</a>, <a href=\"/api/color/setting#stroke\">stroke</a>,\n<a href=\"/api/color/setting#background\">background</a>, and <a href=\"/api/color/creating-and-reading#color\">color</a> are defined by values between 0 and 255 using\nthe <code>:rgb</code> color model. The <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a> function is used to change the\nnumerical range used for specifying colors and to switch color\nsystems. For example, calling\n<code>(color-mode :rgb 1.0)</code> will specify that values are specified between\n0 and 1. The limits for defining colors are altered by setting the\nparameters range1, range2, range3, and range 4.</p>\n",
  :what :fn},
 create-image
 {:args
  ({:value [w h format], :type :clj} {:value [w h], :type :cljs}),
  :category "Image",
  :added "1.0",
  :name create-image,
  :subcategory nil,
  :type :both,
  :processing-name "createImage()",
  :requires-bindings true,
  :link "https://processing.org/reference/createImage_.html",
  :docstring
  "<p>Creates a new datatype for storing images (<code>PImage</code> for clj and\n<code>Image</code> for cljs). This provides a fresh buffer of pixels to play\nwith. Set the size of the buffer with the <code>width</code> and <code>height</code>\nparameters.</p>\n<p>In clj the <code>format</code> parameter defines how the pixels are stored.\nSee the PImage reference for more information.\nPossible formats: <code>:rgb</code>, <code>:argb</code>, <code>:alpha</code> (grayscale alpha channel)</p>\n<p>Prefer using <a href=\"/api/image#create-image\">create-image</a> over initialising new <code>PImage</code> (or <code>Image</code>)\ninstances directly.</p>\n",
  :what :fn},
 sq
 {:args ({:value [a], :type :both}),
  :category "Math",
  :added "1.0",
  :name sq,
  :subcategory "Calculation",
  :type :both,
  :processing-name "sq()",
  :requires-bindings false,
  :link "https://processing.org/reference/sq_.html",
  :docstring
  "<p>Squares a number (multiplies a number by itself). The result is\nalways a positive number, as multiplying two negative numbers always\nyields a positive result. For example, -1 * -1 = 1.</p>\n",
  :what :fn},
 height
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.0",
  :name height,
  :subcategory nil,
  :type :both,
  :processing-name "getHeight()",
  :processing-link nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Height of the display window. The value of height is zero until\nsize is called.</p>\n",
  :what :fn},
 no-loop
 {:args ({:value [], :type :both}),
  :category "Structure",
  :added "1.0",
  :name no-loop,
  :subcategory nil,
  :type :both,
  :processing-name "noLoop()",
  :requires-bindings true,
  :link "https://processing.org/reference/noLoop_.html",
  :docstring
  "<p>Stops Processing from continuously executing the code within\n<code>draw</code>. If <a href=\"/api/structure#start-loop\">start-loop</a> is called, the code in <code>draw</code> will begin to run\ncontinuously again. If using <a href=\"/api/structure#no-loop\">no-loop</a> in setup, it should be the last\nline inside the block.</p>\n<p>When <a href=\"/api/structure#no-loop\">no-loop</a> is used, it's not possible to manipulate or access the\nscreen inside event handling functions such as <a href=\"/api/input/mouse#mouse-pressed?\">mouse-pressed?</a> or\n<a href=\"/api/input/keyboard#key-pressed?\">key-pressed?</a>. Instead, use those functions to call <a href=\"/api/structure#redraw\">redraw</a> or\nloop which will run <code>draw</code>, which can update the screen\nproperly. This means that when <a href=\"/api/structure#no-loop\">no-loop</a> has been called, no drawing\ncan happen, and functions like <a href=\"/api/output/image#save-frame\">save-frame</a> may not be used.</p>\n<p>Note that if the sketch is resized, <a href=\"/api/structure#redraw\">redraw</a> will be called to\nupdate the sketch, even after <a href=\"/api/structure#no-loop\">no-loop</a> has been\nspecified. Otherwise, the sketch would enter an odd state until\nloop was called.</p>\n",
  :what :fn},
 minute
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name minute,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "minute()",
  :requires-bindings false,
  :link "https://processing.org/reference/minute_.html",
  :docstring
  "<p>Returns the current minute as a value from 0 - 59</p>\n",
  :what :fn},
 screen-width
 {:args #{[]},
  :category "Environment",
  :added "1.0",
  :name screen-width,
  :subcategory nil,
  :type :clj,
  :processing-name nil,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Returns the width of the main screen in pixels.</p>\n",
  :what :fn},
 text
 {:args
  ({:value [s x1 y1 x2 y2], :type :both}
   {:value [s x y], :type :both}
   {:value [s x y z], :type :clj}),
  :category "Typography",
  :added "1.0",
  :name text,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "text()",
  :requires-bindings true,
  :link "https://processing.org/reference/text_.html",
  :docstring
  "<p>Draws text to the screen in the position specified by the <code>x</code> and <code>y</code>\nparameters (and the optional <code>z</code> parameter in clj). A default font will be used\nunless a font is set with the <a href=\"/api/typography/loading-and-displaying#text-font\">text-font</a> function. Change the color of the\ntext with the <a href=\"/api/color/setting#fill\">fill</a> function. The text displays in relation to the\n<a href=\"/api/typography/attributes#text-align\">text-align</a> function, which gives the option to draw to the left, right, and\ncenter of the coordinates.</p>\n<p>The <code>x1</code>, <code>y1</code>, <code>x2</code> and <code>y2</code> parameters define a\nrectangular area to display within and may only be used with string\ndata. For text drawn inside a rectangle, the coordinates are\ninterpreted based on the current <a href=\"/api/shape/attributes#rect-mode\">rect-mode</a> setting.</p>\n",
  :what :fn},
 available-fonts
 {:args #{[]},
  :category "Typography",
  :added "1.0",
  :name available-fonts,
  :subcategory "Loading & Displaying",
  :type :clj,
  :processing-name "PFont.list()",
  :requires-bindings false,
  :link "https://processing.org/reference/PFont_list_.html",
  :docstring
  "<p>A sequence of strings representing the fonts on this system\navailable for use.</p>\n<pre><code class=\"language-clojure\">Because of limitations in Java, not all fonts can be used and some\nmight work with one operating system and not others. When sharing a\nsketch with other people or posting it on the web, you may need to\ninclude a `.ttf` or `.otf` version of your font in the data directory of\nthe sketch because other people might not have the font installed on\ntheir computer. Only fonts that can legally be distributed should be\nincluded with a sketch.\n</code></pre>\n",
  :what :fn},
 clear
 {:args ({:value [], :type :both}),
  :category "Color",
  :added "2.4.0",
  :name clear,
  :subcategory "Setting",
  :type :both,
  :processing-name "clear()",
  :requires-bindings true,
  :link "https://processing.org/reference/clear_.html",
  :docstring
  "<p>Clears the pixels within a buffer. This function only works on\ngraphics objects created with the <a href=\"/api/image/rendering#create-graphics\">create-graphics</a> function meaning\nthat you should call it only inside <a href=\"/api/rendering#with-graphics\">with-graphics</a> macro. Unlike\nthe main graphics context (the display window), pixels in additional\ngraphics areas created with <a href=\"/api/image/rendering#create-graphics\">create-graphics</a> can be entirely or\npartially transparent. This function clears everything in a graphics\nobject to make all of the pixels 100% transparent.</p>\n",
  :what :fn},
 binary
 {:args
  ({:value [val], :type :both} {:value [val num-digits], :type :both}),
  :category "Data",
  :require-binding false,
  :added "1.0",
  :name binary,
  :subcategory "Conversion",
  :type :both,
  :processing-name "binary()",
  :link "https://processing.org/reference/binary_.html",
  :docstring
  "<p>Returns a <code>string</code> representing the binary value of an <code>int</code>, <code>char</code> or\n<code>byte</code>. When converting an <code>int</code> to a <code>string</code>, it is possible to specify\nthe number of digits used.</p>\n",
  :what :fn},
 random-2d
 {:args ({:value [], :type :both}),
  :category "Math",
  :added "2.6.1",
  :name random-2d,
  :subcategory "Random",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Returns a new 2D unit vector with a random direction</p>\n",
  :what :fn},
 pop-matrix
 {:args ({:value [], :type :both}),
  :category "Transform",
  :added "1.0",
  :name pop-matrix,
  :subcategory nil,
  :type :both,
  :processing-name "popMatrix()",
  :requires-bindings true,
  :link "https://processing.org/reference/popMatrix_.html",
  :docstring
  "<p>Pops the current transformation matrix off the matrix\nstack. Understanding pushing and popping requires understanding the\nconcept of a matrix stack. The <a href=\"/api/transform#push-matrix\">push-matrix</a> function saves the current\ncoordinate system to the stack and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> restores the prior\ncoordinate system. <a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> are used in conjunction\nwith the other transformation methods and may be embedded to control\nthe scope of the transformations.</p>\n",
  :what :fn},
 ceil
 {:args ({:value [n], :type :both}),
  :category "Math",
  :added "1.0",
  :name ceil,
  :subcategory "Calculation",
  :type :both,
  :processing-name "ceil()",
  :requires-bindings false,
  :link "https://processing.org/reference/ceil_.html",
  :docstring
  "<p>Calculates the closest <code>int</code> value that is greater than or equal to\nthe value of the parameter. For example, <code>(ceil 9.03)</code> returns the\nvalue 10.</p>\n",
  :what :fn},
 key-code
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name key-code,
  :subcategory "Keyboard",
  :type :both,
  :processing-name "keyCode",
  :requires-bindings true,
  :link "https://processing.org/reference/keyCode.html",
  :docstring
  "<p>The variable keyCode is used to detect special keys such as the UP,\nDOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\nfor these keys, it's first necessary to check and see if the key is\ncoded. This is done with the conditional <code>(= (key) CODED)</code>.</p>\n<p>The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\nRETURN, ESC, and DELETE) do not require checking to see if they key\nis coded, and you should simply use the key variable instead of\n<a href=\"/api/input/keyboard#key-code\">key-code</a>. If you're making cross-platform projects, note that the\nENTER key is commonly used on PCs and Unix and the RETURN key is\nused instead on Macintosh. Check for both ENTER and RETURN to make\nsure your program will work for all platforms.</p>\n<p>For users familiar with Java, the values for UP and DOWN are simply\nshorter versions of Java's <code>KeyEvent.VK_UP</code> and\n<code>KeyEvent.VK_DOWN</code>. Other keyCode values can be found in the Java\nKeyEvent reference.</p>\n",
  :what :fn},
 sphere
 {:args ({:value [radius], :type :both}),
  :category "Shape",
  :added "1.0",
  :name sphere,
  :subcategory "3D Primitives",
  :type :both,
  :processing-name "sphere()",
  :requires-bindings true,
  :link "https://processing.org/reference/sphere_.html",
  :docstring
  "<p>Generates a hollow ball made from tessellated triangles.</p>\n",
  :what :fn},
 hue
 {:args ({:value [col], :type :both}),
  :category "Color",
  :added "1.0",
  :name hue,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "hue()",
  :requires-bindings true,
  :link "https://processing.org/reference/hue_.html",
  :docstring "<p>Extracts the hue value from a color.</p>\n",
  :what :fn},
 start-loop
 {:args ({:value [], :type :both}),
  :category "Structure",
  :added "1.0",
  :name start-loop,
  :subcategory nil,
  :type :both,
  :processing-name "loop()",
  :requires-bindings true,
  :link "https://processing.org/reference/loop_.html",
  :docstring
  "<p>Causes Processing to continuously execute the code within\ndraw. If <a href=\"/api/structure#no-loop\">no-loop</a> is called, the code in draw stops executing.</p>\n",
  :what :fn},
 orbit-control
 {:args #{[]},
  :category "Lights, Camera",
  :added "3.0.0",
  :name orbit-control,
  :subcategory "Camera",
  :type :cljs,
  :processing-name "orbitControl()",
  :requires-bindings true,
  :link "https://processing.org/reference/orbitControl_.html",
  :docstring
  "<p>Allows the camera to orbit around a target using mouse.</p>\n",
  :what :fn},
 curve-vertex
 {:args ({:value [x y], :type :both} {:value [x y z], :type :both}),
  :category "Shape",
  :added "1.0",
  :name curve-vertex,
  :subcategory "Vertex",
  :type :both,
  :processing-name "curveVertex()",
  :requires-bindings true,
  :link "https://processing.org/reference/curveVertex_.html",
  :docstring
  "<p>Specifies vertex coordinates for curves. This function may only be\nused between <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> and <a href=\"/api/shape/vertex#end-shape\">end-shape</a> and only when there is no\n<code>mode</code> keyword specified to <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>. The first and last points in a\nseries of <a href=\"/api/shape/vertex#curve-vertex\">curve-vertex</a> lines will be used to guide the beginning and\nend of a the curve. A minimum of four points is required to draw a\ntiny curve between the second and third points. Adding a fifth point\nwith <a href=\"/api/shape/vertex#curve-vertex\">curve-vertex</a> will draw the curve between the second, third, and\nfourth points. The <a href=\"/api/shape/vertex#curve-vertex\">curve-vertex</a> function is an implementation of\nCatmull-Rom splines.</p>\n",
  :what :fn},
 state-atom
 {:args ({:value [], :type :both}),
  :category "State",
  :added "1.0",
  :name state-atom,
  :subcategory nil,
  :type :both,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Retrieve sketch-specific state-atom. All changes to the\natom will be reflected in the state.</p>\n<p>(set-state! :foo 1)\n(state :foo) ;=&gt; 1\n(swap! (state-atom) update-in [:foo] inc)\n(state :foo) ;=&gt; 2</p>\n",
  :what :fn},
 load-image
 {:args ({:value [filename], :type :both}),
  :category "Image",
  :added "1.0",
  :name load-image,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "loadImage()",
  :requires-bindings true,
  :link "https://processing.org/reference/loadImage_.html",
  :docstring
  "<p>Loads an image into a variable of type <code>PImage</code>. Four types of\nimages (<code>.gif</code>, <code>.jpg</code>, <code>.tga</code>, <code>.png</code>) may be loaded. To load\ncorrectly, images must be located in the data directory of the\ncurrent sketch. In most cases, load all images in <code>setup</code> to preload\nthem at the start of the program. Loading images inside <code>draw</code> will\nreduce the speed of a program.</p>\n<p>The filename parameter can also be a URL to a file found online.</p>\n<p>Image is loaded asynchronously. In order to check whether image\nfinished loading use <a href=\"/api/environment#loaded?\">loaded?</a>.</p>\n",
  :what :fn},
 bezier
 {:args
  ({:value [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2], :type :both}
   {:value [x1 y1 cx1 cy1 cx2 cy2 x2 y2], :type :both}),
  :category "Shape",
  :added "1.0",
  :name bezier,
  :subcategory "Curves",
  :type :both,
  :processing-name "bezier()",
  :requires-bindings true,
  :link "https://processing.org/reference/bezier_.html",
  :docstring
  "<p>Draws a Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The first two parameters\nspecify the first anchor point and the last two parameters specify\nthe other anchor point. The middle parameters specify the control\npoints which define the shape of the curve.</p>\n",
  :what :fn},
 smooth
 {:args ({:value [level], :type :both} {:value [], :type :both}),
  :category "Shape",
  :added "1.0",
  :name smooth,
  :subcategory "Attributes",
  :type :both,
  :processing-name "smooth()",
  :requires-bindings true,
  :link "https://processing.org/reference/smooth_.html",
  :docstring
  "<p>Draws all geometry with smooth (anti-aliased) edges. This will slow\ndown the frame rate of the application, but will enhance the visual\nrefinement.</p>\n<p>Must be called inside <code>:settings</code> handler.</p>\n<p>The <code>level</code> parameter (int) increases the level of smoothness with the\n<code>:p2d</code> and <code>:p3d</code> renderers. This is the level of over sampling applied to\nthe graphics buffer. The value <code>2</code> will double the rendering size\nbefore scaling it down to the display size. This is called <code>2x anti-aliasing</code>. The value <code>4</code> is used for <code>4x anti-aliasing</code> and <code>8</code> is\nspecified for <code>8x anti-aliasing</code>. If level is set to <code>0</code>, it will disable\nall smoothing; it's the equivalent of the function <a href=\"/api/shape/attributes#no-smooth\">no-smooth</a>.\nThe maximum anti-aliasing level is determined by the hardware of the\nmachine that is running the software.</p>\n<p>Note that smooth will also improve image quality of resized images.</p>\n",
  :what :fn},
 shear-x
 {:args ({:value [angle], :type :both}),
  :category "Transform",
  :added "1.0",
  :name shear-x,
  :subcategory nil,
  :type :both,
  :processing-name "shearX()",
  :requires-bindings true,
  :link "https://processing.org/reference/shearX_.html",
  :docstring
  "<p>Shears a shape around the x-axis the amount specified by the <code>angle</code>\nparameter. Angles should be specified in radians (values from 0 to\nPI*2) or converted to radians with the <a href=\"/api/math/trigonometry#radians\">radians</a> function. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\nTransformations apply to everything that happens after and\nsubsequent calls to the function accumulates the effect. For\nexample, calling <code>(shear-x (/ PI 2))</code> and then <code>(shear-x (/ PI 2))</code> is\nthe same as <code>(shear-x PI)</code>. If <a href=\"/api/transform#shear-x\">shear-x</a> is called within the draw\nfunction, the transformation is reset when the loop begins again. This\nfunction works in P2D or JAVA2D mode.</p>\n<p>Technically, <a href=\"/api/transform#shear-x\">shear-x</a> multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by the\n<a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> functions.</p>\n",
  :what :fn},
 stroke-weight
 {:args ({:value [weight], :type :both}),
  :category "Shape",
  :added "1.0",
  :name stroke-weight,
  :subcategory "Attributes",
  :type :both,
  :processing-name "strokeWeight()",
  :requires-bindings true,
  :link "https://processing.org/reference/strokeWeight_.html",
  :docstring
  "<p>Sets the width of the stroke used for lines, points, and the border\naround shapes. All widths are set in units of pixels.</p>\n",
  :what :fn},
 directional-light
 {:args ({:value [r g b nx ny nz], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name directional-light,
  :subcategory "Lights",
  :type :both,
  :processing-name "directionalLight()",
  :requires-bindings true,
  :link "https://processing.org/reference/directionalLight_.html",
  :docstring
  "<p>Adds a directional light. Directional light comes from one\ndirection and is stronger when hitting a surface squarely and weaker\nif it hits at a gentle angle. After hitting a surface, a\ndirectional lights scatters in all directions. Lights need to be\nincluded in the <code>draw</code> function to remain persistent in a looping\nprogram. Placing them in the <code>setup</code> function of a looping program will cause\nthem to only have an effect the first time through the loop. The\naffect of the <code>r</code>, <code>g</code>, and <code>b</code> parameters is determined by the current\ncolor mode. The <code>nx</code>, <code>ny</code>, and <code>nz</code> parameters specify the direction the\nlight is facing. For example, setting <code>ny</code> to -1 will cause the\ngeometry to be lit from below (the light is facing directly upward).</p>\n",
  :what :fn},
 frame-rate
 {:args ({:value [new-rate], :type :both}),
  :category "Environment",
  :added "1.0",
  :name frame-rate,
  :subcategory nil,
  :type :both,
  :processing-name "frameRate()",
  :requires-bindings true,
  :link "https://processing.org/reference/frameRate_.html",
  :docstring
  "<p>Specifies a new target framerate (number of frames to be displayed every\nsecond). If the processor is not fast enough to maintain the\nspecified rate, it will not be achieved. For example, the function\ncall <code>(frame-rate 30)</code> will attempt to refresh 30 times a second. It\nis recommended to set the frame rate within setup. The default rate\nis 60 frames per second.</p>\n",
  :what :fn},
 pause-on-error
 {:args #{[options]},
  :category "Middleware",
  :added "2.2.0",
  :ns "quil.middleware",
  :name pause-on-error,
  :subcategory nil,
  :type :clj,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Pauses sketch if any of user-provided handlers throws error.\nIt allows to fix the error on the fly and continue sketch.\nMay be good alternative to default '500ms pause if exception'\nbehaviour.</p>\n",
  :what :fn},
 hour
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name hour,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "hour()",
  :requires-bindings false,
  :link "https://processing.org/reference/hour_.html",
  :docstring
  "<p>Returns the current hour as a value from 0 - 23.</p>\n",
  :what :fn},
 atan
 {:args ({:value [n], :type :both}),
  :category "Math",
  :added "1.0",
  :name atan,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "atan()",
  :requires-bindings false,
  :link "https://processing.org/reference/atan_.html",
  :docstring
  "<p>The inverse of <a href=\"/api/math/trigonometry#tan\">tan</a>, returns the arc tangent of a value. This\nfunction expects the values in the range of -Infinity to\nInfinity (exclusive) and values are returned in the range <code>-PI/2</code> to\n<code>PI/2</code>.</p>\n",
  :what :fn},
 rotate-y
 {:args ({:value [angle], :type :both}),
  :category "Transform",
  :added "1.0",
  :name rotate-y,
  :subcategory nil,
  :type :both,
  :processing-name "rotateY()",
  :requires-bindings true,
  :link "https://processing.org/reference/rotateY_.html",
  :docstring
  "<p>Rotates a shape around the y-axis the amount specified by the <code>angle</code>\nparameter. Angles should be specified in radians (values from 0\nto (* PI 2)) or converted to radians with the <a href=\"/api/math/trigonometry#radians\">radians</a> function.\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a counterclockwise\ndirection. Transformations apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For\nexample, calling <code>(rotate-y HALF-PI)</code> and then <code>(rotate-y HALF-PI)</code> is\nthe same as <code>(rotate-y PI)</code>. If <a href=\"/api/transform#rotate-y\">rotate-y</a> is called within the draw\nfunction, the transformation is reset when the loop begins again. This\nfunction requires either the <code>:p3d</code> or <code>:opengl</code> renderer.</p>\n",
  :what :fn},
 day
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name day,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "day()",
  :requires-bindings false,
  :link "https://processing.org/reference/day_.html",
  :docstring
  "<p>Get the current day of the month (1 through 31).</p>\n",
  :what :fn},
 point-light
 {:args ({:value [r g b x y z], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name point-light,
  :subcategory "Lights",
  :type :both,
  :processing-name "pointLight()",
  :requires-bindings true,
  :link "https://processing.org/reference/pointLight_.html",
  :docstring
  "<p>Adds a point light. Lights need to be included in the draw() to\nremain persistent in a looping program. Placing them in the setup()\nof a looping program will cause them to only have an effect the\nfirst time through the loop. The affect of the <code>r</code>, <code>g</code>, and <code>b</code>\nparameters is determined by the current <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>. The <code>x</code>, <code>y</code>, and <code>z</code>\nparameters set the position of the light</p>\n",
  :what :fn},
 pmouse-x
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name pmouse-x,
  :subcategory "Mouse",
  :type :both,
  :processing-name "pmouseX",
  :requires-bindings true,
  :link "https://processing.org/reference/pmouseX.html",
  :docstring
  "<p>Horizontal coordinate of the mouse in the previous frame</p>\n",
  :what :fn},
 get-sketch-by-id
 {:args #{[id]},
  :category nil,
  :added "1.0",
  :name get-sketch-by-id,
  :subcategory nil,
  :type :cljs,
  :processing-name "getSketchById()",
  :requires-bindings true,
  :link "https://processing.org/reference/getSketchById_.html",
  :docstring
  "<p>Returns sketch object by id of canvas element of sketch.</p>\n",
  :what :fn},
 stroke
 {:args
  ({:value [gray], :type :both}
   {:value [x y z alpha], :type :both}
   {:value [x y z], :type :both}
   {:value [gray alpha], :type :both}),
  :category "Color",
  :added "1.0",
  :name stroke,
  :subcategory "Setting",
  :type :both,
  :processing-name "stroke()",
  :requires-bindings true,
  :link "https://processing.org/reference/stroke_.html",
  :docstring
  "<p>Sets the color used to draw lines and borders around shapes. This\ncolor is either specified in terms of the RGB or HSB color depending\non the current <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a> (the default color space is RGB, with\neach value in the range from 0 to 255).\nIf nil is passed it removes any fill color; equivalent to <a href=\"/api/color/setting#no-stroke\">no-stroke</a>.</p>\n",
  :what :fn},
 mouse-pressed?
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name mouse-pressed?,
  :subcategory "Mouse",
  :type :both,
  :processing-name "mousePressed",
  :requires-bindings true,
  :link "https://processing.org/reference/mousePressed.html",
  :docstring
  "<p>true if a mouse button is pressed, false otherwise.</p>\n",
  :what :fn},
 key-pressed?
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name key-pressed?,
  :subcategory "Keyboard",
  :type :both,
  :processing-name "keyPressed",
  :requires-bindings true,
  :link "https://processing.org/reference/keyPressed.html",
  :docstring
  "<p>true if any key is currently pressed, false otherwise.</p>\n",
  :what :fn},
 display-density
 {:args ({:value [display], :type :both} {:value [], :type :both}),
  :category "Environment",
  :added "2.4.0",
  :name display-density,
  :subcategory nil,
  :type :both,
  :processing-name "displayDensity()",
  :requires-bindings true,
  :link "https://processing.org/reference/displayDensity_.html",
  :docstring
  "<p>This function returns the number 2 if the screen is a high-density\nscreen (called a Retina display on OS X or high-dpi on Windows and\nLinux) and a 1 if not. This information is useful for a program to\nadapt to run at double the pixel density on a screen that supports\nit. Can be used in conjunction with <a href=\"/api/environment#pixel-density\">pixel-density</a>.</p>\n",
  :what :fn},
 quadratic-vertex
 {:args
  ({:value [cx cy cz x3 y3 z3], :type :both}
   {:value [cx cy x3 y3], :type :both}),
  :category "Shape",
  :added "2.0",
  :name quadratic-vertex,
  :subcategory "Vertex",
  :type :both,
  :processing-name "quadraticVertex()",
  :requires-bindings true,
  :link "https://processing.org/reference/quadraticVertex_.html",
  :docstring
  "<p>Specifies vertex coordinates for quadratic Bezier curves. Each call to\n<a href=\"/api/shape/vertex#quadratic-vertex\">quadratic-vertex</a> defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time <a href=\"/api/shape/vertex#quadratic-vertex\">quadratic-vertex</a> is used within a <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> call, it\nmust be prefaced with a call to <a href=\"/api/shape/vertex#vertex\">vertex</a> to set the first anchor point.\nThis function must be used between <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> and <a href=\"/api/shape/vertex#end-shape\">end-shape</a> and only\nwhen there is no MODE parameter specified to begin-shape. Using the 3D\nversion requires rendering with <code>:p3d</code>.</p>\n",
  :what :fn},
 clip
 {:args #{[x y w h]},
  :category "Rendering",
  :added "2.4.0",
  :name clip,
  :subcategory nil,
  :type :clj,
  :processing-name "clip()",
  :requires-bindings true,
  :link "https://processing.org/reference/clip_.html",
  :docstring
  "<p>Limits the rendering to the boundaries of a rectangle defined by\nthe parameters. The boundaries are drawn based on the state of\nthe <a href=\"/api/image/loading-and-displaying#image-mode\">image-mode</a> function, either <code>:corner</code>, <code>:corners</code>, or <code>:center</code>.\nTo disable use <a href=\"/api/rendering#no-clip\">no-clip</a>.</p>\n",
  :what :fn},
 pixel-density
 {:args ({:value [density], :type :both}),
  :category "Environment",
  :added "2.4.0",
  :name pixel-density,
  :subcategory nil,
  :type :both,
  :processing-name "pixelDensity()",
  :requires-bindings true,
  :link "https://processing.org/reference/pixelDensity_.html",
  :docstring
  "<p>It makes it possible for Processing to render using all of the pixels\non high resolutions screens like Apple Retina displays and Windows\nHigh-DPI displays. Possible values 1 or 2. Must be called only from\n:settings handler. To get density of the current screen you can use\nthe <a href=\"/api/environment#display-density\">display-density</a> function.</p>\n",
  :what :fn},
 begin-raw
 {:args #{[renderer filename]},
  :category "Output",
  :added "1.0",
  :name begin-raw,
  :subcategory "Files",
  :type :clj,
  :processing-name "beginRaw()",
  :requires-bindings true,
  :link "https://processing.org/reference/beginRaw_.html",
  :docstring
  "<p>Enables the creation of vectors from 3D data. Requires\ncorresponding <a href=\"/api/output/files#end-raw\">end-raw</a> command. These commands will grab the shape\ndata just before it is rendered to the screen. At this stage, your\nentire scene is nothing but a long list of individual lines and\ntriangles. This means that a shape created with sphere method will\nbe made up of hundreds of triangles, rather than a single object. Or\nthat a multi-segment line shape (such as a curve) will be rendered\nas individual segments.</p>\n",
  :what :fn},
 noise-seed
 {:args ({:value [val], :type :both}),
  :category "Math",
  :added "1.0",
  :name noise-seed,
  :subcategory "Random",
  :type :both,
  :processing-name "noiseSeed()",
  :requires-bindings true,
  :link "https://processing.org/reference/noiseSeed_.html",
  :docstring
  "<p>Sets the seed value for noise. By default, noise produces different\nresults each time the program is run. Set the <code>val</code> parameter to a\nconstant to return the same pseudo-random numbers each time the\nsoftware is run.</p>\n",
  :what :fn},
 apply-matrix
 {:args
  ({:value
    [n00 n01 n02 n03 n10 n11 n12 n13 n20 n21 n22 n23 n30 n31 n32 n33],
    :type :clj}
   {:value [n00 n01 n02 n10 n11 n12], :type :clj}
   {:value [a b c d e f], :type :cljs}),
  :category "Transform",
  :added "1.0",
  :name apply-matrix,
  :subcategory nil,
  :type :both,
  :processing-name "applyMatrix()",
  :requires-bindings true,
  :link "https://processing.org/reference/applyMatrix_.html",
  :docstring
  "<p>Multiplies the current matrix by the one specified through the\nparameters. This is very slow because it will try to calculate the\ninverse of the transform, so avoid it whenever possible. The\nequivalent function in OpenGL is <code>glMultMatrix()</code>.</p>\n<p>Note that cljs has only 2d version and arguments differ see\n<a href=\"https://p5js.org/reference/#/p5/applyMatrix\">https://p5js.org/reference/#/p5/applyMatrix</a></p>\n",
  :what :fn},
 copy
 {:args
  ({:value [src-img [sx sy swidth sheight] [dx dy dwidth dheight]],
    :type :both}
   {:value [[sx sy swidth sheight] [dx dy dwidth dheight]],
    :type :both}
   {:value
    [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]],
    :type :both}),
  :category "Image",
  :added "1.0",
  :name copy,
  :subcategory "Pixels",
  :type :both,
  :processing-name "copy()",
  :requires-bindings true,
  :link "https://processing.org/reference/copy_.html",
  :docstring
  "<p>Copies a region of pixels from one image to another. If <code>src-img</code>\nis not specified it defaults to <a href=\"/api/environment#current-graphics\">current-graphics</a>. If <code>dest-img</code> is not\nspecified - it defaults to <a href=\"/api/environment#current-graphics\">current-graphics</a>. If the source\nand destination regions aren't the same size, it will automatically\nresize the source pixels to fit the specified target region. No\nalpha information is used in the process, however if the source\nimage has an alpha channel set, it will be copied as well.</p>\n",
  :what :fn},
 random-3d
 {:args ({:value [], :type :both}),
  :category "Math",
  :added "2.6.1",
  :name random-3d,
  :subcategory "Random",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Returns a new 3D unit vector with a random direction</p>\n",
  :what :fn},
 begin-shape
 {:args ({:value [mode], :type :both} {:value [], :type :both}),
  :category "Shape",
  :added "1.0",
  :name begin-shape,
  :subcategory "Vertex",
  :type :both,
  :processing-name "beginShape()",
  :requires-bindings true,
  :link "https://processing.org/reference/beginShape_.html",
  :docstring
  "<p>Enables the creation of complex forms. <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> begins recording\nvertices. With no mode specified, the shape can be any irregular\npolygon.</p>\n<p>The available mode keywords are <code>:points</code>, <code>:lines</code>, <code>:triangles</code>,\n<code>:triangle-fan</code>, <code>:triangle-strip</code>,\n<code>:quads</code>, <code>:quad-strip</code>.</p>\n<p>After calling the <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> function, a series of vertex commands\nmust follow. To stop drawing the shape, call <a href=\"/api/shape/vertex#end-shape\">end-shape</a>. The <a href=\"/api/shape/vertex#vertex\">vertex</a>\nfunction with two parameters specifies a position in 2D and the\n<a href=\"/api/shape/vertex#vertex\">vertex</a> function with three parameters specifies a position in\n3D. Each shape will be outlined with the <a href=\"/api/color/creating-and-reading#current-stroke\">current-stroke</a> color and\nfilled with the <a href=\"/api/color/setting#fill\">fill</a> color.</p>\n<p>Transformations such as <a href=\"/api/transform#translate\">translate</a>, <a href=\"/api/transform#rotate\">rotate</a>, and <a href=\"/api/transform#scale\">scale</a> do not work\nwithin <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>. It is also not possible to use other shapes,\nsuch as <a href=\"/api/shape/2d-primitives#ellipse\">ellipse</a> or <a href=\"/api/shape/2d-primitives#rect\">rect</a> within <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>.</p>\n",
  :what :fn},
 set-state!
 {:args ({:value [& state-vals], :type :both}),
  :category "State",
  :added "1.0",
  :name set-state!,
  :subcategory nil,
  :type :both,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Set sketch-specific state. May only be called once (ideally in the\nsetup function). Subsequent calls have no effect.</p>\n<p>Example:</p>\n<pre><code class=\"language-clojure\">(set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))\n</code></pre>\n",
  :what :fn},
 stroke-join
 {:args ({:value [join-mode], :type :both}),
  :category "Shape",
  :added "1.0",
  :name stroke-join,
  :subcategory "Attributes",
  :type :both,
  :processing-name "strokeJoin()",
  :requires-bindings true,
  :link "https://processing.org/reference/strokeJoin_.html",
  :docstring
  "<p>Sets the style of the joints which connect line\nsegments. These joints are either mitered, beveled, or rounded and\nspecified with the corresponding parameters <code>:miter</code>, <code>:bevel</code>, and\n<code>:round</code>. The default joint is <code>:miter</code>.</p>\n<p>This function is not available with the <code>:p2d</code>, <code>:p3d</code>, or <code>:opengl</code>\nrenderers.</p>\n",
  :what :fn},
 cos
 {:args ({:value [angle], :type :both}),
  :category "Math",
  :added "1.0",
  :name cos,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "cos()",
  :requires-bindings false,
  :link "https://processing.org/reference/cos_.html",
  :docstring
  "<p>Calculates the cosine of an angle. This function expects the values\nof the angle parameter to be provided in radians (values from 0 to\nMath/PI*2). Values are returned in the range -1 to 1.</p>\n",
  :what :fn},
 curve-tightness
 {:args ({:value [tightness], :type :both}),
  :category "Shape",
  :added "1.0",
  :name curve-tightness,
  :subcategory "Curves",
  :type :both,
  :processing-name "curveTightness()",
  :requires-bindings true,
  :link "https://processing.org/reference/curveTightness_.html",
  :docstring
  "<p>Modifies the quality of forms created with curve and\n<a href=\"/api/shape/vertex#curve-vertex\">curve-vertex</a>. The parameter <code>tightness</code> determines how the curve fits\nto the vertex points. The value 0.0 is the default value for\n<code>tightness</code> (this value defines the curves to be Catmull-Rom splines)\nand the value 1.0 connects all the points with straight\nlines. Values within the range -5.0 and 5.0 will deform the curves\nbut will leave them recognizable and as values increase in\nmagnitude, they will continue to deform.</p>\n",
  :what :fn},
 tan
 {:args ({:value [angle], :type :both}),
  :category "Math",
  :added "1.0",
  :name tan,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "tan()",
  :requires-bindings false,
  :link "https://processing.org/reference/tan_.html",
  :docstring
  "<p>Calculates the ratio of the sine and cosine of an angle. This\nfunction expects the values of the angle parameter to be provided in\nradians (values from 0 to PI*2). Values are returned in the range\ninfinity to -infinity.</p>\n",
  :what :fn},
 triangle
 {:args ({:value [x1 y1 x2 y2 x3 y3], :type :both}),
  :category "Shape",
  :added "1.0",
  :name triangle,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "triangle()",
  :requires-bindings true,
  :link "https://processing.org/reference/triangle_.html",
  :docstring
  "<p>A triangle is a plane created by connecting three points. The first\ntwo arguments specify the first point, the middle two arguments\nspecify the second point, and the last two arguments specify the\nthird point.</p>\n",
  :what :fn},
 emissive
 {:args #{[gray] [r g b]},
  :category "Lights, Camera",
  :added "1.0",
  :name emissive,
  :subcategory "Material Properties",
  :type :clj,
  :processing-name "emissive()",
  :requires-bindings true,
  :link "https://processing.org/reference/emissive_.html",
  :docstring
  "<p>Sets the emissive color of the material used for drawing shapes\ndrawn to the screen. Used in combination with <a href=\"/api/lights-camera/material-properties#ambient\">ambient</a>, <a href=\"/api/lights-camera/material-properties#specular\">specular</a>, and\n<a href=\"/api/lights-camera/material-properties#shininess\">shininess</a> in setting the material properties of shapes.</p>\n<p>If passed one arg it is assumed to be an <code>int</code> (i.e. a color),\nmultiple args are converted to <code>floats</code>.</p>\n",
  :what :fn},
 sketch
 {:args ({:value [& opts], :type :both}),
  :category "Environment",
  :added "1.0",
  :name sketch,
  :subcategory nil,
  :type :both,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Create and start a new visualisation applet. Can be used to create\nnew sketches programmatically. See documentation for <a href=\"/api/environment#defsketch\">defsketch</a> for\nlist of available options.</p>\n",
  :what :fn},
 color
 {:args
  ({:value [gray], :type :both}
   {:value [r g b], :type :both}
   {:value [r g b a], :type :both}
   {:value [gray alpha], :type :both}),
  :category "Color",
  :added "1.0",
  :name color,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "color()",
  :requires-bindings true,
  :link "https://processing.org/reference/color_.html",
  :docstring
  "<p>Creates an integer representation of a color. The parameters are\ninterpreted as RGB or HSB values depending on the current\n<a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>. The default mode is RGB values from 0 to 255 and\ntherefore, the function call <code>(color 255 204 0)</code> will return a bright\nyellow. Args are cast to floats.</p>\n<ul>\n<li>r - red or hue value</li>\n<li>g - green or saturation value</li>\n<li>b - blue or brightness value</li>\n<li>a - alpha value</li>\n</ul>\n",
  :what :fn},
 arc
 {:args
  ({:value [x y width height start stop], :type :both}
   {:value [x y width height start stop mode], :type :both}),
  :category "Shape",
  :added "1.0",
  :name arc,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "arc()",
  :requires-bindings true,
  :link "https://processing.org/reference/arc_.html",
  :docstring
  "<p>Draws an arc in the display window. Arcs are drawn along the outer\nedge of an ellipse defined by the <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>\nparameters. The origin or the arc's ellipse may be changed with the\n<a href=\"/api/shape/attributes#ellipse-mode\">ellipse-mode</a> function. The <code>start</code> and <code>stop</code> parameters specify the\nangles at which to draw the arc. The <code>mode</code> is either <code>:open</code>, <code>:chord</code> or <code>:pie</code>.</p>\n",
  :what :fn},
 text-align
 {:args
  ({:value [align], :type :both}
   {:value [align-x align-y], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-align,
  :subcategory "Attributes",
  :type :both,
  :processing-name "textAlign()",
  :requires-bindings true,
  :link "https://processing.org/reference/textAlign_.html",
  :docstring
  "<p>Sets the current alignment for drawing text. Available modes are:</p>\n<p>horizontal - <code>:left</code>, <code>:center</code>, and <code>:right</code>\nvertical   - <code>:top</code>, <code>:bottom</code>, <code>:center</code>, and <code>:baseline</code></p>\n<p>An optional second parameter specifies the vertical alignment\nmode. <code>:baseline</code> is the default. The <code>:top</code> and <code>:center</code> parameters are\nstraightforward. The <code>:bottom</code> parameter offsets the line based on the\ncurrent <a href=\"/api/typography/metrics#text-descent\">text-descent</a>. For multiple lines, the final line will be\naligned to the bottom, with the previous lines appearing above it.</p>\n<p>When using text with width and height parameters, <code>:baseline</code> is\nignored, and treated as <code>:top</code>. (Otherwise, text would by default draw\noutside the box, since <code>:baseline</code> is the default setting. <code>:baseline</code> is\nnot a useful drawing mode for text drawn in a rectangle.)</p>\n<p>The vertical alignment is based on the value of <a href=\"/api/typography/metrics#text-ascent\">text-ascent</a>, which\nmany fonts do not specify correctly. It may be necessary to use a\nhack and offset by a few pixels by hand so that the offset looks\ncorrect. To do this as less of a hack, use some percentage of\n<a href=\"/api/typography/metrics#text-ascent\">text-ascent</a> or <a href=\"/api/typography/metrics#text-descent\">text-descent</a> so that the hack works even if you\nchange the size of the font.</p>\n",
  :what :fn},
 text-width
 {:args ({:value [data], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-width,
  :subcategory "Attributes",
  :type :both,
  :processing-name "textWidth()",
  :requires-bindings true,
  :link "https://processing.org/reference/textWidth_.html",
  :docstring
  "<p>Calculates and returns the width of any text string.</p>\n",
  :what :fn},
 mouse-x
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name mouse-x,
  :subcategory "Mouse",
  :type :both,
  :processing-name "mouseX",
  :requires-bindings true,
  :link "https://processing.org/reference/mouseX.html",
  :docstring "<p>Current horizontal coordinate of the mouse.</p>\n",
  :what :fn},
 mag
 {:args ({:value [a b c], :type :clj} {:value [a b], :type :both}),
  :category "Math",
  :added "1.0",
  :name mag,
  :subcategory "Calculation",
  :type :both,
  :processing-name "mag()",
  :requires-bindings false,
  :link "https://processing.org/reference/mag_.html",
  :docstring
  "<p>Calculates the magnitude (or length) of a vector. A vector is a\ndirection in space commonly used in computer graphics and linear\nalgebra. Because it has no start position, the magnitude of a vector\ncan be thought of as the distance from coordinate <code>(0,0)</code> to its <code>(x,y)</code>\nvalue. Therefore, <a href=\"/api/math/calculation#mag\">mag</a> is a shortcut for writing <code>(dist 0 0 x y)</code>.</p>\n",
  :what :fn},
 exit
 {:args ({:value [], :type :both}),
  :category "Structure",
  :added "1.0",
  :name exit,
  :subcategory nil,
  :type :both,
  :processing-name "exit()",
  :requires-bindings true,
  :link "https://processing.org/reference/exit_.html",
  :docstring
  "<p>Quits/stops/exits the program. Rather than terminating\nimmediately, <a href=\"/api/structure#exit\">exit</a> will cause the sketch to exit after <code>draw</code> has\ncompleted (or after <code>setup</code> completes if called during the <code>setup</code>\nmethod).</p>\n",
  :what :fn},
 map-range
 {:args ({:value [val low1 high1 low2 high2], :type :both}),
  :category "Math",
  :added "1.0",
  :name map-range,
  :subcategory "Calculation",
  :type :both,
  :processing-name "map()",
  :requires-bindings false,
  :link "https://processing.org/reference/map_.html",
  :docstring
  "<p>Re-maps a number from one range to another.</p>\n<p>Numbers outside the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful.</p>\n",
  :what :fn},
 sqrt
 {:args ({:value [a], :type :both}),
  :category "Math",
  :added "1.0",
  :name sqrt,
  :subcategory "Calculation",
  :type :both,
  :processing-name "sqrt()",
  :requires-bindings false,
  :link "https://processing.org/reference/sqrt_.html",
  :docstring
  "<p>Calculates the square root of a number. The square root of a number\nis always positive, even though there may be a valid negative\nroot. The square root s of number a is such that (= a (* s s)). It\nis the opposite of squaring.</p>\n",
  :what :fn},
 saturation
 {:args ({:value [c], :type :both}),
  :category "Color",
  :added "1.0",
  :name saturation,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "saturation()",
  :requires-bindings true,
  :link "https://processing.org/reference/saturation_.html",
  :docstring "<p>Extracts the saturation value from a color.</p>\n",
  :what :fn},
 text-font
 {:args
  ({:value [font], :type :both} {:value [font size], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-font,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "textFont()",
  :requires-bindings true,
  :link "https://processing.org/reference/textFont_.html",
  :docstring
  "<p>Sets the current font that will be drawn with the text\nfunction. Fonts must be loaded with <a href=\"/api/typography/loading-and-displaying#load-font\">load-font</a> before it can be\nused. This font will be used in all subsequent calls to the <a href=\"/api/typography/loading-and-displaying#text\">text</a>\nfunction. If no <code>size</code> parameter is input, the font will appear at its\noriginal size until it is changed with <a href=\"/api/typography/attributes#text-size\">text-size</a>.</p>\n<p>Because fonts are usually bitmaped, you should create fonts at the\nsizes that will be used most commonly. Using <a href=\"/api/typography/loading-and-displaying#text-font\">text-font</a> without the\n<code>size</code> parameter will result in the cleanest-looking text.</p>\n<p>With the default (JAVA2D) and PDF renderers, it's also possible to\nenable the use of native fonts via the command\n<code>(hint :enable-native-fonts)</code>. This will produce vector text in JAVA2D\nsketches and PDF output in cases where the vector data is available:\nwhen the font is still installed, or the font is created via the\n<a href=\"/api/typography/loading-and-displaying#create-font\">create-font</a> function.</p>\n",
  :what :fn},
 scale
 {:args
  ({:value [sx sy], :type :both}
   {:value [sx sy sz], :type :both}
   {:value [s], :type :both}),
  :category "Transform",
  :added "1.0",
  :name scale,
  :subcategory nil,
  :type :both,
  :processing-name "scale()",
  :requires-bindings true,
  :link "https://processing.org/reference/scale_.html",
  :docstring
  "<p>Increases or decreases the size of a shape by expanding and\ncontracting vertices. Objects always scale from their relative\norigin to the coordinate system. Scale values are specified as\ndecimal percentages. For example, the function call <code>(scale 2)</code>\nincreases the dimension of a shape by 200%. Transformations apply to\neverything that happens after and subsequent calls to the function\nmultiply the effect. For example, calling <code>(scale 2)</code> and then\n<code>(scale 1.5)</code> is the same as <code>(scale 3)</code>. If scale is called within\ndraw, the transformation is reset when the loop begins again. Using\nthis function with the <code>sz</code> parameter requires specifying <code>:p3d</code> or <code>:opengl</code>\nas the renderer. This function can be further controlled by\n<a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a>.</p>\n",
  :what :fn},
 defsketch
 {:args ({:value [app-name & options], :type :both}),
  :category "Environment",
  :added "1.0",
  :name defsketch,
  :subcategory nil,
  :type :both,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Define and start a sketch and bind it to a var with the symbol\n<code>app-name</code>. If any of the options to the various callbacks are\nsymbols, it wraps them in a call to var to ensure they aren't\ninlined and that redefinitions to the original functions are reflected in\nthe visualisation.</p>\n<ul>\n<li><code>:size</code>           - A vector of width and height for the sketch or :fullscreen.\nDefaults to <code>[500 300]</code>. If you're using :fullscreen you may\nwant to enable present mode - :features [:present].\n:fullscreen size works only in Clojure. In ClojureScript\nall sketches are support fullscreen when you press F11.</li>\n<li><code>:renderer</code>       - Specifies the renderer type. One of <code>:p2d</code>, <code>:p3d</code>, <code>:java2d</code>,\n<code>:opengl</code>, <code>:pdf</code>, <code>:svg</code>). Defaults to <code>:java2d</code>. <code>:dxf</code> renderer\ncan't be used as sketch renderer. Use <a href=\"/api/output/files#begin-raw\">begin-raw</a> method\ninstead. In clojurescript only <code>:p2d</code> and <code>:p3d</code> renderers\nare supported.</li>\n<li><code>:output-file</code>    - Specifies an output file path. Only used in <code>:pdf</code> and <code>:svg</code>\nmodes. Not supported in clojurescript. When writing to a\nfile, call <a href=\"/api/structure#exit\">exit</a> at the end of the draw call to end\nthe sketch and not write repeatedly to the file.</li>\n<li><code>:title</code>          - A string which will be displayed at the top of\nthe sketch window. Not supported in clojurescript.</li>\n<li><code>:features</code>       - A vector of keywords customizing sketch behaviour.\nSupported features:\n<ul>\n<li><code>:keep-on-top</code>   - Sketch window will always be above other windows.\nNote: some platforms might not support always-on-top windows.\nNot supported in clojurescript.</li>\n<li><code>:exit-on-close</code> - Shutdown JVM  when sketch is closed.\nNot supported in clojurescript.</li>\n<li><code>:resizable</code>     - Makes sketch resizable. Not supported in clojurescript.</li>\n<li><code>:no-safe-fns</code>   - Do not catch and print exceptions thrown inside functions\nprovided to sketch (like draw, <a href=\"/api#mouse-clicked?\">mouse-clicked?</a>,\n<a href=\"/api/input/keyboard#key-pressed?\">key-pressed?</a> and others). By default all exceptions\nthrown inside these functions are caught. This prevents\nsketch from breaking when bad function was provided and\nallows you to fix it and reload it on fly. You can\ndisable this behaviour by enabling <code>:no-safe-fns</code>\nfeature. Not supported in clojurescript.</li>\n<li><code>:present</code>       - Switch to present mode (fullscreen without borders, OS\npanels). You may want to use this feature together with\n<code>:size :fullscreen</code>. Not supported in ClojureScript. In\nClojureScript fullscreen is enabled by pressing F11 and\nit's enabled on all sketches automatically.</li>\n<li><code>:no-start</code>      - Disables autostart if sketch was created using defsketch\nmacro. To start sketch you have to call function created\ndefsketch. Supported only in ClojureScript.\nUsage example: <code>:features [:keep-on-top :present]</code></li>\n</ul>\n</li>\n<li><code>:bgcolor</code>        - Sets background color for unused space in present mode.\nColor is specified in hex format for example\n<code>:bgcolor &quot;#00FFFF&quot;</code> (cyan background)\nNot supported in ClojureScript.</li>\n<li><code>:display</code>        - Sets what display should be used by this sketch.\nDisplays are numbered starting from 0. Example: <code>:display 1</code>.\nNot supported in ClojureScript.</li>\n<li><code>:setup</code>          - A function to be called once when setting the sketch up.</li>\n<li><code>:draw</code>           - A function to be repeatedly called at most n times per\nsecond where n is the target <a href=\"/api/environment#frame-rate\">frame-rate</a> set for\nthe visualisation.</li>\n<li><code>:host</code>           - String id of canvas element or DOM element itself.\nSpecifies host for the sketch. Must be specified in sketch,\nmay be omitted in defsketch. If omitted in defsketch,\n:host is set to the name of the sketch. If element with\nspecified id is not found on the page and page is empty -\nnew canvas element will be created. Used in ClojureScript.</li>\n<li><code>:focus-gained</code>   - Called when the sketch gains focus.\nNot supported in ClojureScript.</li>\n<li><code>:focus-lost</code>     - Called when the sketch loses focus.\nNot supported in ClojureScript.</li>\n<li><code>:mouse-entered</code>  - Called when the mouse enters the sketch window.</li>\n<li><code>:mouse-exited</code>   - Called when the mouse leaves the sketch window</li>\n<li><code>:mouse-pressed</code>  - Called every time a mouse button is pressed.</li>\n<li><code>:mouse-released</code> - Called every time a mouse button is released.</li>\n<li><code>:mouse-clicked</code>  - Called once after a mouse button has been pressed\nand then released.</li>\n<li><code>:mouse-moved</code>    - Called every time the mouse moves and a button is\nnot pressed.</li>\n<li><code>:mouse-dragged</code>  - Called every time the mouse moves and a button is\npressed.</li>\n<li><code>:mouse-wheel</code>    - Called every time mouse wheel is rotated.\nTakes 1 argument - wheel rotation, an int.\nNegative values if the mouse wheel was rotated\nup/away from the user, and positive values\nif the mouse wheel was rotated down/ towards the user</li>\n<li><code>:key-pressed</code>    - Called every time any key is pressed.</li>\n<li><code>:key-released</code>   - Called every time any key is released.</li>\n<li><code>:key-typed</code>      - Called once every time non-modifier keys are\npressed.</li>\n<li><code>:on-close</code>       - Called once, when sketch is closed.\nNot supported in ClojureScript.</li>\n<li><code>:middleware</code>     - Vector of middleware to be applied to the sketch.\nMiddleware will be applied in the same order as in comp\nfunction: [f g] will be applied as <code>(f (g options))</code>.</li>\n<li><code>:settings</code>       - Cousin of <code>:setup</code>. A function to be called once when\nsetting sketch up. Should be used only for <a href=\"/api/shape/attributes#smooth\">smooth</a> and\n<a href=\"/api/shape/attributes#no-smooth\">no-smooth</a>. Due to Processing limitations these functions\ncannot be used neither in <code>:setup</code> nor in <code>:draw</code>.</li>\n</ul>\n",
  :what :macro},
 no-stroke
 {:args ({:value [], :type :both}),
  :category "Color",
  :added "1.0",
  :name no-stroke,
  :subcategory "Setting",
  :type :both,
  :processing-name "noStroke()",
  :requires-bindings true,
  :link "https://processing.org/reference/noStroke_.html",
  :docstring
  "<p>Disables drawing the stroke (outline). If both <a href=\"/api/color/setting#no-stroke\">no-stroke</a> and\n<a href=\"/api/color/setting#no-fill\">no-fill</a> are called, nothing will be drawn to the screen.</p>\n",
  :what :fn},
 random-seed
 {:args ({:value [w], :type :both}),
  :category "Math",
  :added "1.0",
  :name random-seed,
  :subcategory "Random",
  :type :both,
  :processing-name "randomSeed()",
  :requires-bindings true,
  :link "https://processing.org/reference/randomSeed_.html",
  :docstring
  "<p>Sets the seed value for random. By default, random produces\ndifferent results each time the program is run. Set the value\nparameter to a constant to return the same pseudo-random numbers\neach time the software is run.</p>\n",
  :what :fn},
 light-specular
 {:args #{[r g b]},
  :category "Lights, Camera",
  :added "1.0",
  :name light-specular,
  :subcategory "Lights",
  :type :clj,
  :processing-name "lightSpecular()",
  :requires-bindings true,
  :link "https://processing.org/reference/lightSpecular_.html",
  :docstring
  "<p>Sets the specular color for lights. Like <a href=\"/api/color/setting#fill\">fill</a>, it affects only the\nelements which are created after it in the code. Specular refers to\nlight which bounces off a surface in a preferred direction (rather\nthan bouncing in all directions like a diffuse light) and is used\nfor creating highlights. The specular quality of a light interacts\nwith the specular material qualities set through the <a href=\"/api/lights-camera/material-properties#specular\">specular</a> and\n<a href=\"/api/lights-camera/material-properties#shininess\">shininess</a> functions.</p>\n",
  :what :fn},
 plane
 {:args #{[width height]},
  :category "Shape",
  :added "3.0.0",
  :name plane,
  :subcategory "3D Primitives",
  :type :cljs,
  :processing-name "plane()",
  :requires-bindings true,
  :link "https://processing.org/reference/plane_.html",
  :docstring
  "<p>Draw a plane with given <code>width</code> and <code>height</code>.</p>\n",
  :what :fn},
 key-as-keyword
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.6",
  :name key-as-keyword,
  :subcategory "Keyboard",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Returns a keyword representing the currently pressed key. Modifier\nkeys are represented as: <code>:up</code>, <code>:down</code>, <code>:left</code>, <code>:right</code>, <code>:alt</code>, <code>:control</code>,\n<code>:shift</code>, <code>:command</code>, <code>:f1-24</code></p>\n",
  :what :fn},
 blend-mode
 {:args ({:value [mode], :type :both}),
  :category "Image",
  :added "2.0",
  :name blend-mode,
  :subcategory "Rendering",
  :type :both,
  :processing-name "blendMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/blendMode_.html",
  :docstring
  "<p>Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):</p>\n<ul>\n<li><code>:blend</code>      - linear interpolation of colours: C = A*factor + B</li>\n<li><code>:add</code>        - additive blending with white clip:\nC = min(A*factor + B, 255)</li>\n<li><code>:subtract</code>   - subtractive blending with black clip:\nC = max(B - A*factor, 0)</li>\n<li><code>:darkest</code>    - only the darkest colour succeeds:\nC = min(A*factor, B)</li>\n<li><code>:lightest</code>   - only the lightest colour succeeds:\nC = max(A*factor, B)</li>\n<li><code>:difference</code> - subtract colors from underlying image.</li>\n<li><code>:exclusion</code>  - similar to <code>:difference</code>, but less extreme.</li>\n<li><code>:multiply</code>   - Multiply the colors, result will always be darker.</li>\n<li><code>:screen</code>     - Opposite multiply, uses inverse values of the colors.</li>\n<li><code>:replace</code>    - the pixels entirely replace the others and don't utilize\nalpha (transparency) values.</li>\n<li><code>:overlay</code>    - mix of <code>:multiply</code> and <code>:screen</code>. Multiplies dark values,\nand screens light values.</li>\n<li><code>:hard-light</code> - :screen when greater than 50% gray, <code>:multiply</code> when lower.</li>\n<li><code>:soft-light</code> - mix of <code>:darkest</code> and <code>:lightest</code>. Works like :overlay, but\nnot as harsh.</li>\n<li><code>:dodge</code>      - lightens light tones and increases contrast, ignores darks.</li>\n<li><code>:burn</code>       - darker areas are applied, increasing contrast, ignores\nlights.</li>\n</ul>\n<p>Note: in clj <code>:hard-light</code>, <code>:soft-light</code>, <code>:overlay</code>, <code>:dodge</code>, <code>:burn</code>\nmodes are not supported. In cljs <code>:subtract</code> mode is not supported.</p>\n<p>factor is the alpha value of the pixel being drawn</p>\n",
  :what :fn},
 dist
 {:args
  ({:value [x1 y1 z1 x2 y2 z2], :type :both}
   {:value [x1 y1 x2 y2], :type :both}),
  :category "Math",
  :added "1.0",
  :name dist,
  :subcategory "Calculation",
  :type :both,
  :processing-name "dist()",
  :requires-bindings false,
  :link "https://processing.org/reference/dist_.html",
  :docstring "<p>Calculates the distance between two points.</p>\n",
  :what :fn},
 norm
 {:args ({:value [val start stop], :type :both}),
  :category "Math",
  :added "1.0",
  :name norm,
  :subcategory "Calculation",
  :type :both,
  :processing-name "norm()",
  :requires-bindings true,
  :link "https://processing.org/reference/norm_.html",
  :docstring
  "<p>Normalize a value to exist between 0 and 1 (inclusive).</p>\n",
  :what :fn},
 end-shape
 {:args ({:value [mode], :type :both} {:value [], :type :both}),
  :category "Shape",
  :added "1.0",
  :name end-shape,
  :subcategory "Vertex",
  :type :both,
  :processing-name "endShape()",
  :requires-bindings true,
  :link "https://processing.org/reference/endShape_.html",
  :docstring
  "<p>May only be called after <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>. When <a href=\"/api/shape/vertex#end-shape\">end-shape</a> is called,\nall of image data defined since the previous call to <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> is\nwritten into the image buffer. The keyword <code>:close</code> may be passed to\nclose the shape (to connect the beginning and the end).</p>\n",
  :what :fn},
 fill
 {:args
  ({:value [gray], :type :both}
   {:value [r g b], :type :both}
   {:value [r g b alpha], :type :both}
   {:value [gray alpha], :type :both}),
  :category "Color",
  :added "1.0",
  :name fill,
  :subcategory "Setting",
  :type :both,
  :processing-name "fill()",
  :requires-bindings true,
  :link "https://processing.org/reference/fill_.html",
  :docstring
  "<p>Sets the color used to fill shapes. For example, if you run <code>(fill 204 102 0)</code>,\nall subsequent shapes will be filled with orange.  This function casts all\ninput as a <code>float</code>. If nil is passed it removes any fill color; equivalent to\ncalling <a href=\"/api/color/setting#no-fill\">no-fill</a>.</p>\n",
  :what :fn},
 with-translation
 {:args ({:value [translation-vector & body], :type :both}),
  :category "Transform",
  :added "1.0",
  :name with-translation,
  :subcategory "Utility Macros",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Performs body with translation, restores current transformation on\nexit.</p>\n",
  :what :macro},
 reset-matrix
 {:args ({:value [], :type :both}),
  :category "Transform",
  :added "1.0",
  :name reset-matrix,
  :subcategory nil,
  :type :both,
  :processing-name "resetMatrix()",
  :requires-bindings true,
  :link "https://processing.org/reference/resetMatrix_.html",
  :docstring
  "<p>Replaces the current matrix with the identity matrix. The\nequivalent function in OpenGL is <code>glLoadIdentity()</code></p>\n",
  :what :fn},
 mask-image
 {:args
  ({:value [img mask], :type :both} {:value [mask], :type :both}),
  :category "Image",
  :added "1.0",
  :name mask-image,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "PImage.mask()",
  :requires-bindings false,
  :link "https://processing.org/reference/PImage_mask_.html",
  :docstring
  "<p>Masks part of an image from displaying by loading another image and\nusing it as an alpha channel. This mask image should only contain\ngrayscale data. The mask image needs to be the same size as the image\nto which it is applied.</p>\n<p>If single argument function is used - masked image is sketch itself\nor graphics if used inside <a href=\"/api/rendering#with-graphics\">with-graphics</a> macro. If you're passing\ngraphics to this function - it works only with <code>:p3d</code> and <code>:opengl</code> renderers.</p>\n<p>This method is useful for creating dynamically generated alpha\nmasks.</p>\n",
  :what :fn},
 green
 {:args ({:value [col], :type :both}),
  :category "Color",
  :added "1.0",
  :name green,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "green()",
  :requires-bindings true,
  :link "https://processing.org/reference/green_.html",
  :docstring
  "<p>Extracts the green value from a color, scaled to match current\n<a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>. This value is always returned as a <code>float</code> so be careful\nnot to assign it to an <code>int</code> value.</p>\n",
  :what :fn},
 begin-contour
 {:args ({:value [], :type :both}),
  :category "Shape",
  :added "2.0",
  :name begin-contour,
  :subcategory "Vertex",
  :type :both,
  :processing-name "beginContour()",
  :requires-bindings true,
  :link "https://processing.org/reference/beginContour_.html",
  :docstring
  "<p>Use the <a href=\"/api/shape/vertex#begin-contour\">begin-contour</a> and <a href=\"/api/shape/vertex#end-contour\">end-contour</a> function to create negative\nshapes within shapes. These functions can only be used within a\n<a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>/<a href=\"/api/shape/vertex#end-shape\">end-shape</a> pair and they only work with the <code>:p2d</code> and <code>:p3d</code>\nrenderers.</p>\n",
  :what :fn},
 pow
 {:args ({:value [num exponent], :type :both}),
  :category "Math",
  :added "1.0",
  :name pow,
  :subcategory "Calculation",
  :type :both,
  :processing-name "pow()",
  :requires-bindings false,
  :link "https://processing.org/reference/pow_.html",
  :docstring
  "<p>Facilitates exponential expressions. The <a href=\"/api/math/calculation#pow\">pow</a> function is an\nefficient way of multiplying numbers by themselves (or their\nreciprocal) in large quantities. For example, <code>(pow 3 5)</code> is\nequivalent to the expression <code>(* 3 3 3 3 3)</code> and <code>(pow 3 -5)</code> is\nequivalent to <code>(/ 1 (* 3 3 3 3 3))</code>.</p>\n",
  :what :fn},
 box
 {:args
  ({:value [width height depth], :type :both}
   {:value [size], :type :both}),
  :category "Shape",
  :added "1.0",
  :name box,
  :subcategory "3D Primitives",
  :type :both,
  :processing-name "box()",
  :requires-bindings true,
  :link "https://processing.org/reference/box_.html",
  :docstring "<p>Creates an extruded rectangle.</p>\n",
  :what :fn},
 exp
 {:args ({:value [val], :type :both}),
  :category "Math",
  :added "1.0",
  :name exp,
  :subcategory "Calculation",
  :type :both,
  :processing-name "exp()",
  :requires-bindings false,
  :link "https://processing.org/reference/exp_.html",
  :docstring
  "<p>Returns Euler's number <code>e</code> (2.71828...) raised to the power of the\n<code>val</code> parameter.</p>\n",
  :what :fn},
 text-ascent
 {:args ({:value [], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-ascent,
  :subcategory "Metrics",
  :type :both,
  :processing-name "textAscent()",
  :requires-bindings true,
  :link "https://processing.org/reference/textAscent_.html",
  :docstring
  "<p>Returns the ascent of the current font at its current size. This\ninformation is useful for determining the height of the font above\nthe baseline. For example, adding the <a href=\"/api/typography/metrics#text-ascent\">text-ascent</a> and <a href=\"/api/typography/metrics#text-descent\">text-descent</a>\nvalues will give you the total height of the line.</p>\n",
  :what :fn},
 shininess
 {:args #{[shine]},
  :category "Lights, Camera",
  :added "1.0",
  :name shininess,
  :subcategory "Material Properties",
  :type :clj,
  :processing-name "shininess()",
  :requires-bindings true,
  :link "https://processing.org/reference/shininess_.html",
  :docstring
  "<p>Sets the amount of gloss in the surface of shapes. Used in\ncombination with <a href=\"/api/lights-camera/material-properties#ambient\">ambient</a>, <a href=\"/api/lights-camera/material-properties#specular\">specular</a>, and <a href=\"/api/lights-camera/material-properties#emissive\">emissive</a> in setting\nthe material properties of shapes.</p>\n",
  :what :fn},
 rect-mode
 {:args ({:value [mode], :type :both}),
  :category "Shape",
  :added "1.0",
  :name rect-mode,
  :subcategory "Attributes",
  :type :both,
  :processing-name "rectMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/rectMode_.html",
  :docstring
  "<p>Modifies the location from which rectangles draw. The default <code>mode</code>\nis <code>:corner</code>. Available modes are:</p>\n<ul>\n<li><code>:corner</code>  - Specifies the location to be the upper left corner of the\nshape and uses the third and fourth parameters of <a href=\"/api/shape/2d-primitives#rect\">rect</a> to\nspecify the width and height.</li>\n<li><code>:corners</code> - Uses the first and second parameters of <a href=\"/api/shape/2d-primitives#rect\">rect</a> to set the\nlocation of one corner and uses the third and fourth\nparameters to set the opposite corner.</li>\n<li><code>:center</code>  - Draws the image from its center point and uses the third\nand fourth parameters of <a href=\"/api/shape/2d-primitives#rect\">rect</a> to specify the image's width\nand height.</li>\n<li><code>:radius</code>  - Draws the image from its center point and uses the third\nand forth parameters of <a href=\"/api/shape/2d-primitives#rect\">rect</a> to specify half of the\nimage's width and height.</li>\n</ul>\n",
  :what :fn},
 ellipse-mode
 {:args ({:value [mode], :type :both}),
  :category "Shape",
  :added "1.0",
  :name ellipse-mode,
  :subcategory "Attributes",
  :type :both,
  :processing-name "ellipseMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/ellipseMode_.html",
  :docstring
  "<p>Modifies the origin of the ellipse according to the specified <code>mode</code>:</p>\n<ul>\n<li><code>:center</code>  - specifies the location of the ellipse as\nthe center of the shape <strong>(default)</strong>.</li>\n<li><code>:radius</code>  - similar to center, but the width and height parameters to\nellipse specify the radius of the ellipse, rather than the\ndiameter.</li>\n<li><code>:corner</code>  - draws the shape from the upper-left corner of its bounding\nbox.</li>\n<li><code>:corners</code> - uses the four parameters to ellipse to set two opposing\ncorners of the ellipse's bounding box.</li>\n</ul>\n",
  :what :fn},
 month
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name month,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "month()",
  :requires-bindings false,
  :link "https://processing.org/reference/month_.html",
  :docstring
  "<p>Returns the current month as a value from 1 - 12.</p>\n",
  :what :fn},
 width
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.0",
  :name width,
  :subcategory nil,
  :type :both,
  :processing-name "getWidth()",
  :processing-link nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Width of the display window. The value of width is zero until size is\ncalled.</p>\n",
  :what :fn},
 background
 {:args
  ({:value [gray], :type :both}
   {:value [r g b], :type :both}
   {:value [r g b a], :type :both}
   {:value [gray alpha], :type :both}),
  :category "Color",
  :added "1.0",
  :name background,
  :subcategory "Setting",
  :type :both,
  :processing-name "background()",
  :requires-bindings true,
  :link "https://processing.org/reference/background_.html",
  :docstring
  "<p>Sets the color used for the background of the Processing\nwindow. The default background is light gray. In the draw function,\nthe background color is used to clear the display window at the\nbeginning of each frame.</p>\n<p>It is not possible to use transparency (alpha) in background colors\nwith the main drawing surface, however they will work properly with\n<a href=\"/api/image/rendering#create-graphics\">create-graphics</a>. Converts args to <code>floats</code>.</p>\n",
  :what :fn},
 ortho
 {:args
  ({:value [], :type :both}
   {:value [left right bottom top], :type :both}
   {:value [left right bottom top near far], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name ortho,
  :subcategory "Camera",
  :type :both,
  :processing-name "ortho()",
  :requires-bindings true,
  :link "https://processing.org/reference/ortho_.html",
  :docstring
  "<p>Sets an orthographic projection and defines a parallel clipping\nvolume. All objects with the same dimension appear the same size,\nregardless of whether they are near or far from the camera. The\nparameters to this function specify the clipping volume where <code>left</code>\nand <code>right</code> are the minimum and maximum x values, <code>top</code> and <code>bottom</code> are\nthe minimum and maximum y values, and <code>near</code> and <code>far</code> are the minimum\nand maximum z values. If no parameters are given, the default is\nused: <code>(ortho 0 width 0 height -10 10)</code></p>\n",
  :what :fn},
 no-clip
 {:args #{[]},
  :category "Rendering",
  :added "2.4.0",
  :name no-clip,
  :subcategory nil,
  :type :clj,
  :processing-name "noClip()",
  :requires-bindings true,
  :link "https://processing.org/reference/noClip_.html",
  :docstring
  "<p>Disables the clipping previously started by the <a href=\"/api/rendering#clip\">clip</a> function.</p>\n",
  :what :fn},
 brightness
 {:args ({:value [color], :type :both}),
  :category "Color",
  :added "1.0",
  :name brightness,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "brightness()",
  :requires-bindings true,
  :link "https://processing.org/reference/brightness_.html",
  :docstring
  "<p>Extracts the brightness value from a color. Returns a <code>float</code>.</p>\n",
  :what :fn},
 debug
 {:args #{[msg delay-ms] [msg]},
  :category "Debugging",
  :added "1.6",
  :name debug,
  :type :clj,
  :processing-name nil,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Prints <code>msg</code> and then sleeps the current thread for <code>delay-ms</code>. Useful\nfor debugging live running sketches. <code>delay-ms</code> defaults to 300.</p>\n",
  :what :fn},
 specular
 {:args ({:value [gray], :type :both} {:value [x y z], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name specular,
  :subcategory "Material Properties",
  :type :both,
  :processing-name "specular()",
  :requires-bindings true,
  :link "https://processing.org/reference/specular_.html",
  :docstring
  "<p>Sets the specular color of the materials used for shapes drawn to\nthe screen, which sets the color of highlights. Specular refers to\nlight which bounces off a surface in a preferred direction (rather\nthan bouncing in all directions like a diffuse light). Used in\ncombination with <a href=\"/api/lights-camera/material-properties#emissive\">emissive</a>, <a href=\"/api/lights-camera/material-properties#ambient\">ambient</a>, and <a href=\"/api/lights-camera/material-properties#shininess\">shininess</a> in setting\nthe material properties of shapes.</p>\n",
  :what :fn},
 save-frame
 {:args #{[name]},
  :category "Output",
  :added "1.0",
  :name save-frame,
  :subcategory "Image",
  :type :clj,
  :processing-name "saveFrame()",
  :requires-bindings true,
  :link "https://processing.org/reference/saveFrame_.html",
  :docstring
  "<p>Saves an image identical to the current display window as a\nfile. May be called multiple times - each file saved will have a\nunique name. Name and image format may be modified by passing a\nstring parameter of the form &quot;foo-####.ext&quot; where foo- can be any\narbitrary string, #### will be replaced with the current frame id\nand .ext is one of .tiff, .targa, .png, .jpeg or .jpg</p>\n<p>Examples:\n<code>(save-frame &quot;pretty-pic-####.jpg&quot;)</code></p>\n",
  :what :fn},
 cursor
 {:args ({:value [], :type :both} {:value [cursor-mode], :type :both}),
  :category "Environment",
  :added "1.0",
  :name cursor,
  :subcategory nil,
  :type :both,
  :processing-name "cursor()",
  :requires-bindings true,
  :link "https://processing.org/reference/cursor_.html",
  :docstring
  "<p>Sets the cursor to a predefined symbol or makes it\nvisible if already hidden (after <a href=\"/api/environment#no-cursor\">no-cursor</a> was called).</p>\n<p>Available modes: <code>:arrow</code>, <code>:cross</code>, <code>:hand</code>, <code>:move</code>, <code>:text</code>, <code>:wait</code></p>\n<p>See <a href=\"/api/environment#cursor-image\">cursor-image</a> for specifying a generic image as the cursor\nsymbol (clj only).</p>\n",
  :what :fn},
 noise
 {:args
  ({:value [x], :type :both}
   {:value [x y], :type :both}
   {:value [x y z], :type :both}),
  :category "Math",
  :added "1.0",
  :name noise,
  :subcategory "Random",
  :type :both,
  :processing-name "noise()",
  :requires-bindings true,
  :link "https://processing.org/reference/noise_.html",
  :docstring
  "<p>Returns the Perlin noise value at specified coordinates. Perlin\nnoise is a random sequence generator producing a more natural\nordered, harmonic succession of numbers compared to the standard\nrandom function. It was invented by Ken Perlin in the 1980s and\nbeen used since in graphical applications to produce procedural\ntextures, natural motion, shapes, terrains etc.</p>\n<p>The main difference to the random function is that Perlin noise is\ndefined in an infinite n-dimensional space where each pair of\ncoordinates corresponds to a fixed semi-random value (fixed only for\nthe lifespan of the program). The resulting value will always be\nbetween 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\ndepending on the number of coordinates given. The noise value can be\nanimated by moving through the noise space and the 2nd and 3rd\ndimensions can also be interpreted as time.</p>\n<p>The actual noise is structured similar to an audio signal, in\nrespect to the function's use of frequencies. Similar to the concept\nof harmonics in physics, perlin noise is computed over several\noctaves which are added together for the final result.</p>\n<p>Another way to adjust the character of the resulting sequence is the\nscale of the input coordinates. As the function works within an\ninfinite space the value of the coordinates doesn't matter as such,\nonly the distance between successive coordinates does (eg. when\nusing noise within a loop). As a general rule the smaller the\ndifference between coordinates, the smoother the resulting noise\nsequence will be. Steps of 0.005-0.03 work best for most\napplications, but this will differ depending on use.</p>\n",
  :what :fn},
 push-style
 {:args ({:value [], :type :both}),
  :category "Structure",
  :added "1.0",
  :name push-style,
  :subcategory nil,
  :type :both,
  :processing-name "pushStyle()",
  :requires-bindings true,
  :link "https://processing.org/reference/pushStyle_.html",
  :docstring
  "<p>Saves the current style settings onto a 'style stack'. Use with\n<a href=\"/api/structure#pop-style\">pop-style</a> which restores the prior settings. Note that these\nfunctions are always used together. They allow you to change the\nstyle settings and later return to what you had. When a new style is\nstarted with <a href=\"/api/structure#push-style\">push-style</a>, it builds on the current style\ninformation. The <a href=\"/api/structure#push-style\">push-style</a> and <a href=\"/api/structure#pop-style\">pop-style</a> functions can be\nembedded to provide more control.</p>\n<p>The style information controlled by the following functions are\nincluded in the style: <a href=\"/api/color/setting#fill\">fill</a>, <a href=\"/api/color/setting#stroke\">stroke</a>, <a href=\"/api/image/loading-and-displaying#tint\">tint</a>, <a href=\"/api/shape/attributes#stroke-weight\">stroke-weight</a>,\n<a href=\"/api/shape/attributes#stroke-cap\">stroke-cap</a>, <a href=\"/api/shape/attributes#stroke-join\">stroke-join</a>, <a href=\"/api/image/loading-and-displaying#image-mode\">image-mode</a>, <a href=\"/api/shape/attributes#rect-mode\">rect-mode</a>, <a href=\"/api/shape/attributes#ellipse-mode\">ellipse-mode</a>,\n<a href=\"/api/shape/loading-and-displaying#shape-mode\">shape-mode</a>, <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>, <a href=\"/api/typography/attributes#text-align\">text-align</a>, <a href=\"/api/typography/loading-and-displaying#text-font\">text-font</a>, <a href=\"/api/typography/attributes#text-mode\">text-mode</a>, <a href=\"/api/typography/attributes#text-size\">text-size</a>,\n<a href=\"/api/typography/attributes#text-leading\">text-leading</a>, <a href=\"/api/lights-camera/material-properties#emissive\">emissive</a>, <a href=\"/api/lights-camera/material-properties#specular\">specular</a>, <a href=\"/api/lights-camera/material-properties#shininess\">shininess</a>, and <a href=\"/api/lights-camera/material-properties#ambient\">ambient</a>.</p>\n",
  :what :fn},
 bezier-vertex
 {:args
  ({:value [cx1 cy1 cx2 cy2 x y], :type :both}
   {:value [cx1 cy1 cz1 cx2 cy2 cz2 x y z], :type :both}),
  :category "Shape",
  :added "1.0",
  :name bezier-vertex,
  :subcategory "Vertex",
  :type :both,
  :processing-name "bezierVertex()",
  :requires-bindings true,
  :link "https://processing.org/reference/bezierVertex_.html",
  :docstring
  "<p>Specifies vertex coordinates for Bezier curves. Each call to\n<a href=\"/api/shape/vertex#bezier-vertex\">bezier-vertex</a> defines the position of two control points and one\nanchor point of a Bezier curve, adding a new segment to a line or\nshape. The first time <a href=\"/api/shape/vertex#bezier-vertex\">bezier-vertex</a> is used within a <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>\ncall, it must be prefaced with a call to <a href=\"/api/shape/vertex#vertex\">vertex</a> to set the first\nanchor point. This function must be used between <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> and\n<a href=\"/api/shape/vertex#end-shape\">end-shape</a> and only when there is no parameter specified to\n<a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>.</p>\n",
  :what :fn},
 light-falloff
 {:args #{[constant linear quadratic]},
  :category "Lights, Camera",
  :added "1.0",
  :name light-falloff,
  :subcategory "Lights",
  :type :clj,
  :processing-name "lightFalloff()",
  :requires-bindings true,
  :link "https://processing.org/reference/lightFalloff_.html",
  :docstring
  "<p>Sets the falloff rates for point lights, spot lights, and ambient\nlights. The parameters are used to determine the falloff with the\nfollowing equation:</p>\n<p>d = distance from light position to vertex position\nfalloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)</p>\n<p>Like fill, it affects only the elements which are created after it\nin the code. The default value is <code>(light-falloff 1.0 0.0 0.0)</code>.\nThinking about an ambient light with a falloff can be tricky. It is\nused, for example, if you wanted a region of your scene to be lit\nambiently by one color and another region to be lit ambiently by\nanother color, you would use an ambient light with location and\nfalloff. You can think of it as a point light that doesn't care\nwhich direction a surface it is facing.</p>\n",
  :what :fn},
 noise-detail
 {:args
  ({:value [octaves], :type :both}
   {:value [octaves falloff], :type :both}),
  :category "Math",
  :added "1.0",
  :name noise-detail,
  :subcategory "Random",
  :type :both,
  :processing-name "noiseDetail()",
  :requires-bindings true,
  :link "https://processing.org/reference/noiseDetail_.html",
  :docstring
  "<p>Adjusts the character and level of detail produced by the Perlin\nnoise function. Similar to harmonics in physics, noise is computed\nover several octaves. Lower octaves contribute more to the output\nsignal and as such define the overall intensity of the noise, whereas\nhigher octaves create finer grained details in the noise\nsequence. By default, noise is computed over 4 octaves with each\noctave contributing exactly half than its predecessor, starting at\n50% strength for the 1st octave. This falloff amount can be changed\nby adding an additional function parameter. Eg. a falloff factor of\n0.75 means each octave will now have 75% impact (25% less) of the\nprevious lower octave. Any value between 0.0 and 1.0 is valid,\nhowever note that values greater than 0.5 might result in greater\nthan 1.0 values returned by noise.</p>\n<p>By changing these parameters, the signal created by the noise\nfunction can be adapted to fit very specific needs and\ncharacteristics.</p>\n",
  :what :fn},
 save
 {:args ({:value [filename], :type :both}),
  :category "Output",
  :added "1.0",
  :name save,
  :subcategory "Image",
  :type :both,
  :processing-name "save()",
  :requires-bindings true,
  :link "https://processing.org/reference/save_.html",
  :docstring
  "<p>Saves an image from the display window. Images are saved in TIFF,\nTARGA, JPEG, and PNG format depending on the extension within the\nfilename parameter. For example, image.tif will have a TIFF image\nand image.png will save a PNG image. If no extension is included in\nthe filename, the image will save in TIFF format and .tif will be\nadded to the name. All images saved from the main drawing window\nwill be opaque. To save images without a background, use\n<a href=\"/api/image/rendering#create-graphics\">create-graphics</a>.</p>\n",
  :what :fn},
 curve-point
 {:args ({:value [a b c d t], :type :both}),
  :category "Shape",
  :added "1.0",
  :name curve-point,
  :subcategory "Curves",
  :type :both,
  :processing-name "curvePoint()",
  :requires-bindings true,
  :link "https://processing.org/reference/curvePoint_.html",
  :docstring
  "<p>Evaluates the curve at point <code>t</code> for points <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>. The parameter\n<code>t</code> varies between 0 and 1, <code>a</code> and <code>d</code> are points on the curve, and <code>b</code> and <code>c</code>\nare the control points. This can be done once with the x\ncoordinates and a second time with the y coordinates to get the\nlocation of a curve at <code>t</code>.</p>\n",
  :what :fn},
 state
 {:args ({:value [], :type :both} {:value [key], :type :both}),
  :category "State",
  :added "1.0",
  :name state,
  :subcategory nil,
  :type :both,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Retrieve sketch-specific state by key. Must initially call\nset-state! to store state. If no parameter passed whole\nstate map is returned.</p>\n<p>(set-state! :foo 1)\n(state :foo) ;=&gt; 1\n(state) ;=&gt; {:foo 1}</p>\n",
  :what :fn},
 load-shader
 {:args
  ({:value [fragment-filename vertex-filename], :type :both}
   {:value [fragment-filename], :type :both}),
  :category "Rendering",
  :added "2.0",
  :name load-shader,
  :subcategory "Shaders",
  :type :both,
  :processing-name "loadShader()",
  :requires-bindings true,
  :link "https://processing.org/reference/loadShader_.html",
  :docstring
  "<p>Loads a shader into the <code>PShader</code> object for clj and <code>Shader</code> object for\ncljs. In clj mode shaders are\ncompatible with the P2D and P3D renderers, but not with the default\nrenderer. In cljs mode shaders are compatible with the P3D renderer.</p>\n",
  :what :fn},
 resize
 {:args ({:value [img w h], :type :both}),
  :category "Image",
  :added "2.1.0",
  :name resize,
  :type :both,
  :processing-name "resize()",
  :processing-link
  "https://processing.org/reference/PImage_resize_.html",
  :requires-bindings true,
  :link "https://processing.org/reference/PImage_resize_.html",
  :docstring
  "<p>Resize the image to a new width and height.\nTo make the image scale proportionally, use 0 as the value for the wide or\nhigh parameter. For instance, to make the width of an image 150 pixels,\nand change the height using the same proportion, use <code>(resize 150 0)</code>.</p>\n<p>Even though a <code>PGraphics</code> is technically a <code>PImage</code>, it is not possible\nto rescale the image data found in a <code>PGraphics</code>.\n(It's simply not possible to do this consistently across renderers:\ntechnically infeasible with P3D, or what would it even do with PDF?)\nIf you want to resize <code>PGraphics</code> content, first get a copy of its image data\nusing the get() method, and call resize() on the <code>PImage</code> that is returned.</p>\n",
  :what :fn},
 perspective
 {:args
  ({:value [], :type :both}
   {:value [fovy aspect z-near z-far], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name perspective,
  :subcategory "Camera",
  :type :both,
  :processing-name "perspective()",
  :requires-bindings true,
  :link "https://processing.org/reference/perspective_.html",
  :docstring
  "<p>Sets a perspective projection applying foreshortening, making\ndistant objects appear smaller than closer ones. The parameters\ndefine a viewing volume with the shape of truncated pyramid. Objects\nnear to the front of the volume appear their actual size, while\nfarther objects appear smaller. This projection simulates the\nperspective of the world more accurately than orthographic\nprojection. The version of perspective without parameters sets the\ndefault perspective and the version with four parameters allows the\nprogrammer to set the area precisely. The default values are:\n<code>perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0)</code> where\n<code>cameraZ</code> is <code>((height/2.0) / tan(PI*60.0/360.0))</code></p>\n",
  :what :fn},
 seconds
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name seconds,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "second()",
  :requires-bindings false,
  :link "https://processing.org/reference/second_.html",
  :docstring
  "<p>Returns the current second as a value from 0 - 59.</p>\n",
  :what :fn},
 hint
 {:args #{[hint-type]},
  :category "Rendering",
  :added "1.0",
  :name hint,
  :subcategory nil,
  :type :clj,
  :processing-name "hint()",
  :processing-link nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Set various hints and hacks for the renderer. This is used to\nhandle obscure rendering features that cannot be implemented in a\nconsistent manner across renderers. Many options will often graduate\nto standard features instead of hints over time.</p>\n<p>Options:</p>\n<ul>\n<li>\n<p><code>:enable-native-fonts</code> - Use the native version fonts when they are\ninstalled, rather than the bitmapped version from a .vlw\nfile. This is useful with the default (or JAVA2D) renderer\nsetting, as it will improve font rendering speed. This is not\nenabled by default, because it can be misleading while testing\nbecause the type will look great on your machine (because you have\nthe font installed) but lousy on others' machines if the identical\nfont is unavailable. This option can only be set per-sketch, and\nmust be called before any use of text-font.</p>\n</li>\n<li>\n<p><code>:disable-native-fonts</code> - Disables native font support.</p>\n</li>\n<li>\n<p><code>:disable-depth-test</code> - Disable the zbuffer, allowing you to draw on\ntop of everything at will. When depth testing is disabled, items\nwill be drawn to the screen sequentially, like a painting. This\nhint is most often used to draw in 3D, then draw in 2D on top of\nit (for instance, to draw GUI controls in 2D on top of a 3D\ninterface). Starting in release 0149, this will also clear the\ndepth buffer. Restore the default with :enable-depth-test\nbut note that with the depth buffer cleared, any 3D drawing that\nhappens later in draw will ignore existing shapes on the screen.</p>\n</li>\n<li>\n<p><code>:enable-depth-test</code> - Enables the zbuffer.</p>\n</li>\n<li>\n<p><code>:enable-depth-sort</code> - Enable primitive z-sorting of triangles and\nlines in :p3d and :opengl rendering modes. This can slow\nperformance considerably, and the algorithm is not yet perfect.</p>\n</li>\n<li>\n<p><code>:disable-depth-sort</code> - Disables hint :enable-depth-sort</p>\n</li>\n<li>\n<p><code>:disable-opengl-errors</code> - Speeds up the OPENGL renderer setting\nby not checking for errors while running.</p>\n</li>\n<li>\n<p><code>:enable-opengl-errors</code> - Turns on OpenGL error checking</p>\n</li>\n<li>\n<p><code>:enable-depth-mask</code></p>\n</li>\n<li>\n<p><code>:disable-depth-mask</code></p>\n</li>\n<li>\n<p><code>:enable-optimized-stroke</code></p>\n</li>\n<li>\n<p><code>:disable-optimized-stroke</code></p>\n</li>\n<li>\n<p><code>:enable-retina-pixels</code></p>\n</li>\n<li>\n<p><code>:disable-retina-pixels</code></p>\n</li>\n<li>\n<p><code>:enable-stroke-perspective</code></p>\n</li>\n<li>\n<p><code>:disable-stroke-perspective</code></p>\n</li>\n<li>\n<p><code>:enable-stroke-pure</code></p>\n</li>\n<li>\n<p><code>:disable-stroke-pure</code></p>\n</li>\n<li>\n<p><code>:enable-texture-mipmaps</code></p>\n</li>\n<li>\n<p><code>:disable-texture-mipmaps</code></p>\n</li>\n</ul>\n",
  :what :fn},
 sphere-detail
 {:args #{[ures vres] [res]},
  :category "Shape",
  :added "1.0",
  :name sphere-detail,
  :subcategory "3D Primitives",
  :type :clj,
  :processing-name "sphereDetail()",
  :requires-bindings true,
  :link "https://processing.org/reference/sphereDetail_.html",
  :docstring
  "<p>Controls the detail used to render a sphere by adjusting the number\nof vertices of the sphere mesh. The default resolution is 30, which\ncreates a fairly detailed sphere definition with vertices every\n360/30 = 12 degrees. If you're going to render a great number of\nspheres per frame, it is advised to reduce the level of detail using\nthis function. The setting stays active until <a href=\"/api/shape/3d-primitives#sphere-detail\">sphere-detail</a> is\ncalled again with a new parameter and so should not be called prior\nto every <a href=\"/api/shape/3d-primitives#sphere\">sphere</a> statement, unless you wish to render spheres with\ndifferent settings, e.g. using less detail for smaller spheres or\nones further away from the camera. To control the detail of the\nhorizontal and vertical resolution independently, use the version of\nthe functions with two parameters.</p>\n",
  :what :fn},
 vertex
 {:args
  ({:value [x y z u v], :type :both}
   {:value [x y u v], :type :both}
   {:value [x y], :type :both}
   {:value [x y z], :type :both}),
  :category "Shape",
  :added "1.0",
  :name vertex,
  :subcategory "Vertex",
  :type :both,
  :processing-name "vertex()",
  :requires-bindings true,
  :link "https://processing.org/reference/vertex_.html",
  :docstring
  "<p>All shapes are constructed by connecting a series of\nvertices. <a href=\"/api/shape/vertex#vertex\">vertex</a> is used to specify the vertex coordinates for\npoints, lines, triangles, quads, and polygons and is used\nexclusively within the <a href=\"/api/shape/vertex#begin-shape\">begin-shape</a> and <a href=\"/api/shape/vertex#end-shape\">end-shape</a> functions.</p>\n<p>Drawing a vertex in 3D using the <code>z</code> parameter requires the <code>:p3d</code> or\n<code>:opengl</code> renderers to be used.</p>\n<p>This function is also used to map a texture onto the geometry. The\n<a href=\"/api/shape/vertex#texture\">texture</a> function declares the texture to apply to the geometry and the <code>u</code>\nand <code>v</code> coordinates set define the mapping of this texture to the\nform. By default, the coordinates used for <code>u</code> and <code>v</code> are specified in\nrelation to the image's size in pixels, but this relation can be\nchanged with <a href=\"/api/shape/vertex#texture-mode\">texture-mode</a>.</p>\n",
  :what :fn},
 delay-frame
 {:args #{[freeze-ms]},
  :category "Structure",
  :added "1.0",
  :name delay-frame,
  :subcategory nil,
  :type :clj,
  :processing-name "delay()",
  :processing-link nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Forces the program to stop running for a specified time. Delay\ntimes are specified in thousandths of a second, therefore the\nfunction call <code>(delay 3000)</code> will stop the program for three\nseconds. Because the screen is updated only at the end of <code>draw</code>,\nthe program may appear to 'freeze', because the screen will not\nupdate when the <a href=\"/api/structure#delay-frame\">delay-frame</a> function is used. This function\nhas no effect inside <code>setup</code>.</p>\n",
  :what :fn},
 spot-light
 {:args
  #{[r g b x y z nx ny nz angle concentration]
    [[r g b] [x y z] [nx ny nz] angle concentration]},
  :category "Lights, Camera",
  :added "1.0",
  :name spot-light,
  :subcategory "Lights",
  :type :clj,
  :processing-name "spotLight()",
  :requires-bindings true,
  :link "https://processing.org/reference/spotLight_.html",
  :docstring
  "<p>Adds a spot light. Lights need to be included in the draw to\nremain persistent in a looping program. Placing them in the setup\nof a looping program will cause them to only have an effect the\nfirst time through the loop. The affect of the <code>r</code>, <code>g</code>, and <code>b</code>\nparameters is determined by the current <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>. The <code>x</code>, <code>y</code>, and <code>z</code>\nparameters specify the position of the light and <code>nx</code>, <code>ny</code>, <code>nz</code> specify\nthe direction or light. The angle parameter affects the angle of the\nspotlight cone.</p>\n",
  :what :fn},
 target-frame-rate
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.5.0",
  :name target-frame-rate,
  :subcategory nil,
  :type :both,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Returns the target framerate specified with the function <a href=\"/api/environment#frame-rate\">frame-rate</a></p>\n",
  :what :fn},
 tint
 {:args
  ({:value [gray], :type :both}
   {:value [r g b], :type :both}
   {:value [r g b a], :type :both}
   {:value [gray alpha], :type :both}),
  :category "Image",
  :added "1.0",
  :name tint,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "tint()",
  :requires-bindings true,
  :link "https://processing.org/reference/tint_.html",
  :docstring
  "<p>Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by setting the <code>alpha</code>.</p>\n<p>To make an image transparent, but not change it's color, use white\nas the tint color and specify an <code>alpha</code> value. For instance,\n<code>(tint 255 128)</code> will make an image 50% transparent (unless\n<a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a> has been used).</p>\n<p>The value for the parameter gray must be less than or equal to the\ncurrent maximum value as specified by <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>. The default\nmaximum value is 255.</p>\n<p>Also used to control the coloring of textures in 3D.</p>\n",
  :what :fn},
 bezier-tangent
 {:args ({:value [a b c d t], :type :both}),
  :category "Shape",
  :added "1.0",
  :name bezier-tangent,
  :subcategory "Curves",
  :type :both,
  :processing-name "bezierTangent()",
  :requires-bindings true,
  :link "https://processing.org/reference/bezierTangent_.html",
  :docstring
  "<p>Calculates the tangent of a point on a Bezier curve.\n(See <a href=\"http://en.wikipedia.org/wiki/Tangent\">http://en.wikipedia.org/wiki/Tangent</a>)</p>\n",
  :what :fn},
 asin
 {:args ({:value [n], :type :both}),
  :category "Math",
  :added "1.0",
  :name asin,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "asin()",
  :requires-bindings false,
  :link "https://processing.org/reference/asin_.html",
  :docstring
  "<p>The inverse of <a href=\"/api/math/trigonometry#sin\">sin</a>, returns the arc sine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned\nin the range <code>-PI/2</code> to <code>PI/2</code>.</p>\n",
  :what :fn},
 lerp
 {:args ({:value [start stop amt], :type :both}),
  :category "Math",
  :added "1.0",
  :name lerp,
  :subcategory "Calculation",
  :type :both,
  :processing-name "lerp()",
  :requires-bindings false,
  :link "https://processing.org/reference/lerp_.html",
  :docstring
  "<p>Calculates a number between two numbers at a specific\nincrement. The <code>amt</code> parameter is the amount to interpolate between\nthe two values where 0.0 equal to the first point, 0.1 is very near\nthe first point, 0.5 is half-way in between, etc. The lerp function\nis convenient for creating motion along a straight path and for\ndrawing dotted lines.</p>\n",
  :what :fn},
 unhex
 {:args ({:value [hex-str], :type :both}),
  :category "Data",
  :require-binding false,
  :name unhex,
  :subcategory "Conversion",
  :type :both,
  :processing-name "hex()",
  :link "https://processing.org/reference/hex_.html",
  :docstring
  "<p>Converts a String representation of a hexadecimal number to its\nequivalent integer value.</p>\n",
  :what :fn},
 text-num
 {:args
  ({:value [num x y], :type :both} {:value [num x y z], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-num,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "text()",
  :requires-bindings true,
  :link "https://processing.org/reference/text_.html",
  :docstring
  "<p>Draws a number to the screen in the specified position. See the\n<a href=\"/api/typography/loading-and-displaying#text\">text</a> function for more details.</p>\n",
  :what :fn},
 round
 {:args ({:value [val], :type :both}),
  :category "Math",
  :added "1.0",
  :name round,
  :subcategory "Calculation",
  :type :both,
  :processing-name "round()",
  :requires-bindings false,
  :link "https://processing.org/reference/round_.html",
  :docstring
  "<p>Calculates the integer closest to the value parameter. For example,\n<code>(round 9.2)</code> returns the value 9.</p>\n",
  :what :fn},
 background-image
 {:args ({:value [img], :type :both}),
  :category "Color",
  :added "1.0",
  :name background-image,
  :subcategory "Setting",
  :type :both,
  :processing-name "background()",
  :requires-bindings true,
  :link "https://processing.org/reference/background_.html",
  :docstring
  "<p>Specify an image to be used as the background for a sketch. Its\nwidth and height must be the same size as the sketch window. Images\nused as background will ignore the current <a href=\"/api/image/loading-and-displaying#tint\">tint</a> setting.</p>\n",
  :what :fn},
 load-shape
 {:args ({:value [filename], :type :both}),
  :category "Shape",
  :added "1.0",
  :name load-shape,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "loadShape()",
  :requires-bindings true,
  :link "https://processing.org/reference/loadShape_.html",
  :docstring
  "<p>Load a geometry from a file as a <code>PShape</code> in clj, and a <code>Geometry</code>\nin cljs.</p>\n",
  :what :fn},
 blend-color
 {:args #{[c1 c2 mode]},
  :category "Color",
  :added "1.0",
  :name blend-color,
  :subcategory "Creating & Reading",
  :type :clj,
  :processing-name "blendColor()",
  :processing-link nil,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Blends two color values together based on the blending mode given specified\nwith the mode keyword.</p>\n<pre><code class=\"language-clojure\"> Available blend modes are:\n\n * `:blend`      - linear interpolation of colours: C = A*factor + B\n * `:add`        - additive blending with white clip:\n                                               C = min(A*factor + B, 255)\n * `:subtract`   - subtractive blending with black clip:\n                                               C = max(B - A*factor, 0)\n * `:darkest`    - only the darkest colour succeeds:\n                                               C = min(A*factor, B)\n * `:lightest`   - only the lightest colour succeeds:\n                                               C = max(A*factor, B)\n * `:difference` - subtract colors from underlying image.\n * `:exclusion`  - similar to :difference, but less extreme.\n * `:multiply`   - Multiply the colors, result will always be darker.\n * `:screen`     - Opposite multiply, uses inverse values of the colors.\n * `:overlay`    - A mix of :multiply and :screen. Multiplies dark values\n                   and screens light values.\n * `:hard-light` - :screen when greater than 50% gray, :multiply when\n                   lower.\n * `:soft-light` - Mix of :darkest and :lightest. Works like :overlay,\n                   but not as harsh.\n * `:dodge`      - Lightens light tones and increases contrast, ignores\n                   darks.\n                   Called &quot;Color Dodge&quot; in Illustrator and Photoshop.\n * `:burn`       - Darker areas are applied, increasing contrast, ignores\n                   lights. Called &quot;Color Burn&quot; in Illustrator and\n                   Photoshop.\n</code></pre>\n",
  :what :fn},
 texture-wrap
 {:args #{[mode]},
  :category "Shape",
  :added "2.0",
  :name texture-wrap,
  :subcategory "Vertex",
  :type :clj,
  :processing-name "textureWrap()",
  :requires-bindings true,
  :link "https://processing.org/reference/textureWrap_.html",
  :docstring
  "<p>Defines if textures repeat or draw once within a texture map. The two\nparameters are <code>:clamp</code> (the default behavior) and <code>:repeat</code>. This function\nonly works with the <code>:p2d</code> and <code>:p3d</code> renderers.</p>\n",
  :what :fn},
 fun-mode
 {:args ({:value [options], :type :both}),
  :category "Middleware",
  :added "2.1.0",
  :ns "quil.middleware",
  :name fun-mode,
  :subcategory nil,
  :type :both,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Introduces function mode. Adds 'update' function which takes current\nstate and returns new state. Makes all other functions (setup, draw,\nmouse-click, etc) state-aware. See wiki for more details.</p>\n",
  :what :fn},
 stroke-cap
 {:args ({:value [cap-mode], :type :both}),
  :category "Shape",
  :added "1.0",
  :name stroke-cap,
  :subcategory "Attributes",
  :type :both,
  :processing-name "strokeCap()",
  :requires-bindings true,
  :link "https://processing.org/reference/strokeCap_.html",
  :docstring
  "<p>Sets the style for rendering line endings. These ends are either\nsquared, extended, or rounded and specified with the corresponding\nparameters <code>:square</code>, <code>:project</code>, and <code>:round</code>. The default cap is <code>:round</code>.</p>\n",
  :what :fn},
 no-fill
 {:args ({:value [], :type :both}),
  :category "Color",
  :added "1.0",
  :name no-fill,
  :subcategory "Setting",
  :type :both,
  :processing-name "noFill()",
  :requires-bindings true,
  :link "https://processing.org/reference/noFill_.html",
  :docstring
  "<p>Disables filling geometry. If both <a href=\"/api/color/setting#no-stroke\">no-stroke</a> and <a href=\"/api/color/setting#no-fill\">no-fill</a> are called,\nnothing will be drawn to the screen.</p>\n",
  :what :fn},
 resize-sketch
 {:require-bindings true,
  :category "Environment",
  :added "2.7.0",
  :args ({:value [width height], :type :both}),
  :name resize-sketch,
  :docstring
  "<p>Resizes sketch.\nNote about ClojureScript version: if the <code>div</code> element is resized externally\n(for example from js on a page then you still need to call this\nmethod in order to tell Quil that size has changed. Currently there is no\ngood way to automatically detect that size of the <code>&lt;div&gt;</code> element changed.</p>\n",
  :what :fn,
  :link nil,
  :type :both},
 year
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name year,
  :subcategory "Time & Date",
  :type :both,
  :processing-name "year()",
  :requires-bindings false,
  :link "https://processing.org/reference/year_.html",
  :docstring
  "<p>Returns the current year as an integer (2003, 2004, 2005, etc).</p>\n",
  :what :fn},
 key-coded?
 {:args ({:value [c], :type :both}),
  :category "Input",
  :added "1.6",
  :name key-coded?,
  :subcategory "Keyboard",
  :type :both,
  :processing-name nil,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Returns true if char <code>c</code> is a <code>coded</code> char i.e. it is necessary to\nfetch the <a href=\"/api/input/keyboard#key-code\">key-code</a> as an integer and use that to determine the\nspecific key pressed. See <a href=\"/api/input/keyboard#key-as-keyword\">key-as-keyword</a>.</p>\n",
  :what :fn},
 curve-tangent
 {:args ({:value [a b c d t], :type :both}),
  :category "Shape",
  :added "1.0",
  :name curve-tangent,
  :subcategory "Curves",
  :type :both,
  :processing-name "curveTangent()",
  :requires-bindings true,
  :link "https://processing.org/reference/curveTangent_.html",
  :docstring
  "<p>Calculates the tangent of a point on a curve.\nSee: <a href=\"http://en.wikipedia.org/wiki/Tangent\">http://en.wikipedia.org/wiki/Tangent</a></p>\n",
  :what :fn},
 pmouse-y
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name pmouse-y,
  :subcategory "Mouse",
  :type :both,
  :processing-name "pmouseY",
  :requires-bindings true,
  :link "https://processing.org/reference/pmouseY.html",
  :docstring
  "<p>Vertical coordinate of the mouse in the previous frame</p>\n",
  :what :fn},
 hex
 {:args
  ({:value [val], :type :both} {:value [val num-digits], :type :both}),
  :category "Data",
  :require-binding false,
  :name hex,
  :subcategory "Conversion",
  :type :both,
  :processing-name "hex()",
  :link "https://processing.org/reference/hex_.html",
  :docstring
  "<p>Converts a byte, char, int, or color to a String containing the\nequivalent hexadecimal notation. For example color(0, 102, 153) will\nconvert to the String &quot;FF006699&quot;. This function can help make your\ngeeky debugging sessions much happier.</p>\n",
  :what :fn},
 with-fill
 {:args ({:value [fill & body], :type :both}),
  :category "Color",
  :added "1.7",
  :name with-fill,
  :subcategory "Utility Macros",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Temporarily set the fill color for the body of this macro.\nThe code outside of the <a href=\"/api/color/utility-macros#with-fill\">with-fill</a> form will have the previous\nfill color set.</p>\n<p>A fill argument of nil disables the fill.</p>\n<p>Examples:</p>\n<pre><code class=\"language-clojure\">(with-fill 255 ...)\n(with-fill [10 80 98] ...)\n(with-fill nil ...)\n</code></pre>\n",
  :what :macro},
 ellipsoid
 {:args
  #{[radius-x radius-y radius-z] [radius-x radius-y radius-z detail-x]
    [radius-x radius-y radius-z detail-x detail-y]},
  :category "Shape",
  :added "3.0.0",
  :name ellipsoid,
  :subcategory "3D Primitives",
  :type :cljs,
  :processing-name "ellipsoid()",
  :requires-bindings true,
  :link "https://processing.org/reference/ellipsoid_.html",
  :docstring
  "<p>Draws an ellipsoid with given radius</p>\n<pre><code class=\"language-clojure\">  Optional parameters:\n    * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n    * `detail-y` - number of segments, the more segments the smoother geometry default is 16\n</code></pre>\n",
  :what :fn},
 no-cursor
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.0",
  :name no-cursor,
  :subcategory nil,
  :type :both,
  :processing-name "noCursor()",
  :requires-bindings true,
  :link "https://processing.org/reference/noCursor_.html",
  :docstring
  "<p>Hides the cursor from view. Will not work when running in full\nscreen (Present) mode.</p>\n",
  :what :fn},
 create-font
 {:args #{[name size smooth charset] [name size smooth] [name size]},
  :category "Typography",
  :added "1.0",
  :name create-font,
  :subcategory "Loading & Displaying",
  :type :clj,
  :processing-name "createFont()",
  :requires-bindings true,
  :link "https://processing.org/reference/createFont_.html",
  :docstring
  "<p>Dynamically converts a font to the format used by Processing (a\n<code>PFont</code>) from either a font name that's installed on the computer, or\nfrom a <code>.ttf</code> or <code>.otf</code> file inside the sketches 'data' folder. This\nfunction is an advanced feature for precise control.</p>\n<pre><code class=\"language-clojure\"> Use [[available-fonts]] to obtain the names for the fonts recognized by\n the computer and are compatible with this function.\n\n The `size` parameter states the font size you want to generate. The\n `smooth` parameter specifies if the font should be antialiased or not,\n and the `charset` parameter is an array of chars that specifies the\n characters to generate.\n\n This function creates a bitmapped version of a font. It loads a font\n by name, and converts it to a series of images based on the size of\n the font. When possible, the text function will use a native font\n rather than the bitmapped version created behind the scenes with\n create-font. For instance, when using the default renderer\n setting (JAVA2D), the actual native version of the font will be\n employed by the sketch, improving drawing quality and\n performance. With the `:p2d`, `:p3d`, and `:opengl` renderer settings, the\n bitmapped version will be used. While this can drastically improve\n speed and appearance, results are poor when exporting of the sketch\n does not include the `.otf` or `.ttf` file, and the requested font is\n not available on the machine running the sketch.\n</code></pre>\n",
  :what :fn},
 current-graphics
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "2.0",
  :name current-graphics,
  :subcategory nil,
  :type :both,
  :requires-bindings true,
  :link nil,
  :tag PGraphics,
  :docstring
  "<p>Graphics currently used for drawing. By default it is sketch graphics,\nbut if called inside <a href=\"/api/rendering#with-graphics\">with-graphics</a> macro - graphics passed to the macro\nis returned. This method should be used if you need to call some methods\nthat are not implemented by quil.</p>\n<p>Example:</p>\n<pre><code class=\"language-clojure\">(.beginDraw (current-graphics))\n</code></pre>\n",
  :what :fn},
 abs
 {:args ({:value [n], :type :both}),
  :category "Math",
  :added "1.0",
  :name abs,
  :subcategory "Calculation",
  :type :both,
  :processing-name "abs()",
  :requires-bindings false,
  :link "https://processing.org/reference/abs_.html",
  :docstring
  "<p>Calculates the absolute value (magnitude) of a number. The\nabsolute value of a number is always positive. Dynamically casts to\nan <code>int</code> or <code>float</code> appropriately for Clojure.</p>\n",
  :what :fn},
 pop-style
 {:args ({:value [], :type :both}),
  :category "Structure",
  :added "1.0",
  :name pop-style,
  :subcategory nil,
  :type :both,
  :processing-name "popStyle()",
  :requires-bindings true,
  :link "https://processing.org/reference/popStyle_.html",
  :docstring
  "<p>Restores the prior settings on the 'style stack'. Used in\nconjunction with <a href=\"/api/structure#push-style\">push-style</a>. Together they allow you to change the\nstyle settings and later return to what you had. When a new style is\nstarted with <a href=\"/api/structure#push-style\">push-style</a>, it builds on the current style information.\nThe <a href=\"/api/structure#push-style\">push-style</a> and <a href=\"/api/structure#pop-style\">pop-style</a> functions can be nested to provide more\ncontrol</p>\n",
  :what :fn},
 focused
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.0",
  :name focused,
  :subcategory nil,
  :type :both,
  :processing-name "focused",
  :requires-bindings true,
  :link "https://processing.org/reference/focused.html",
  :docstring
  "<p>Returns <code>true</code> if the applet has focus, <code>false</code> otherwise.</p>\n",
  :what :fn},
 text-mode
 {:args #{[mode]},
  :category "Typography",
  :added "1.0",
  :name text-mode,
  :subcategory "Attributes",
  :type :clj,
  :processing-name "textMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/textMode_.html",
  :docstring
  "<p>Sets the way text draws to the screen - available modes\nare <code>:model</code> and <code>:shape</code></p>\n<pre><code class=\"language-clojure\"> In the default configuration (the `:model` mode), it's possible to\n rotate, scale, and place letters in two and three dimensional space.\n\n The `:shape` mode draws text using the glyph outlines of individual\n characters rather than as textures. This mode is only supported with\n the PDF and OPENGL renderer settings. With the PDF renderer, you\n must specify the `:shape` [[text-mode]] before any other drawing occurs.\n If the outlines are not available, then `:shape` will be ignored and\n `:model` will be used instead.\n\n The `:shape` option in OPENGL mode can be combined with [[begin-raw]] to\n write vector-accurate text to 2D and 3D output files, for instance\n DXF or PDF. `:shape` is not currently optimized for OPENGL, so if\n recording shape data, use `:model` until you're ready to capture the\n geometry with [[begin-raw]].\n</code></pre>\n",
  :what :fn},
 torus
 {:args
  #{[radius tube-radius] [radius tube-radius detail-x]
    [radius tube-radius detail-x detail-y]},
  :category "Shape",
  :added "3.0.0",
  :name torus,
  :subcategory "3D Primitives",
  :type :cljs,
  :processing-name "torus()",
  :requires-bindings true,
  :link "https://processing.org/reference/torus_.html",
  :docstring
  "<p>Draw a torus with given <code>radius</code> and <code>tube-radius</code>.</p>\n<pre><code class=\"language-clojure\">  Optional parameters:\n    * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n    * `detail-y` - number of segments, the more segments the smoother geometry default is 16\n</code></pre>\n",
  :what :fn},
 image-mode
 {:args ({:value [mode], :type :both}),
  :category "Image",
  :added "1.0",
  :name image-mode,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "imageMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/imageMode_.html",
  :docstring
  "<p>Modifies the location from which images draw. The default <code>mode</code> is <code>:corner</code>.\nAvailable modes are:</p>\n<ul>\n<li><code>:corner</code>  - specifies the location to be the upper left corner and\nuses the fourth and fifth parameters of image to set the\nimage's width and height.</li>\n<li><code>:corners</code> - uses the second and third parameters of image to set the\nlocation of one corner of the image and uses the fourth\nand fifth parameters to set the opposite corner.</li>\n<li><code>:center</code>  - draw images centered at the given x and y position.</li>\n</ul>\n",
  :what :fn},
 line
 {:args
  ({:value [x1 y1 z1 x2 y2 z2], :type :both}
   {:value [p1 p2], :type :both}
   {:value [x1 y1 x2 y2], :type :both}),
  :category "Shape",
  :added "1.0",
  :name line,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "line()",
  :requires-bindings true,
  :link "https://processing.org/reference/line_.html",
  :docstring
  "<p>Draws a line (a direct path between two points) to the screen. The\nversion of line with four parameters draws the line in 2D. To color\na line, use the <a href=\"/api/color/setting#stroke\">stroke</a> function. A line cannot be filled, therefore\nthe fill method will not affect the color of a line. 2D lines are\ndrawn with a width of one pixel by default, but this can be changed\nwith the <a href=\"/api/shape/attributes#stroke-weight\">stroke-weight</a> function. The version with six parameters\nallows the line to be placed anywhere within XYZ space.</p>\n",
  :what :fn},
 do-record
 {:args ({:value [graphics & body], :type :both}),
  :category "Output",
  :added "2.5",
  :name do-record,
  :subcategory "Files",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Macro for drawing on graphics which saves result in the file at the end.\nSimilar to <a href=\"/api/rendering#with-graphics\">with-graphics</a> macro. <a href=\"/api/output/files#do-record\">do-record</a> assumed to be used with <code>:pdf</code>\ngraphics.</p>\n<p>Example:</p>\n<pre><code class=\"language-clojure\">(q/do-record (q/create-graphics 200 200 :pdf &quot;output.pdf&quot;)\n  (q/fill 250 0 0)\n  (q/ellipse 100 100 150 150))\n</code></pre>\n",
  :what :macro},
 red
 {:args ({:value [c], :type :both}),
  :category "Color",
  :added "1.0",
  :name red,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "red()",
  :requires-bindings true,
  :link "https://processing.org/reference/red_.html",
  :docstring
  "<p>Extracts the red value from a color, scaled to match the current\n<a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>.</p>\n",
  :what :fn},
 current-fill
 {:args ({:value [], :type :both}),
  :category "Color",
  :name current-fill,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "PGraphics.fillColor",
  :processing-link
  "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor",
  :requires-bindings true,
  :link
  "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor",
  :docstring "<p>Return the current fill color.</p>\n",
  :what :fn},
 blue
 {:args ({:value [color], :type :both}),
  :category "Color",
  :added "1.0",
  :name blue,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "blue()",
  :requires-bindings true,
  :link "https://processing.org/reference/blue_.html",
  :docstring
  "<p>Extracts the blue value from a color, scaled to match current color-mode.\nReturns a <code>float</code>.</p>\n",
  :what :fn},
 frustum
 {:args #{[left right bottom top near far]},
  :category "Lights, Camera",
  :added "1.0",
  :name frustum,
  :subcategory "Camera",
  :type :clj,
  :processing-name "frustum()",
  :requires-bindings true,
  :link "https://processing.org/reference/frustum_.html",
  :docstring
  "<p>Sets a perspective matrix defined through the parameters. Works\nlike glFrustum, except it wipes out the current perspective matrix\nrather than multiplying itself with it.\n<a href=\"https://en.wikipedia.org/wiki/Frustum\">https://en.wikipedia.org/wiki/Frustum</a></p>\n",
  :what :fn},
 with-rotation
 {:args ({:value [rotation & body], :type :both}),
  :category "Transform",
  :added "1.0",
  :name with-rotation,
  :subcategory "Utility Macros",
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring
  "<p>Performs body with rotation, restores current transformation on exit.\nAccepts a vector <code>[angle]</code> or <code>[angle x y z]</code>.</p>\n<p>When 4 arguments provides it produces a rotation of angle degrees\naround the vector x y z. Check examples to better understand.\nThis rotation follows the right-hand rule, so if the vector x y z points\ntoward the user, the rotation will be counterclockwise.</p>\n<p>Example:</p>\n<pre><code class=\"language-clojure\">  (with-rotation [angle]\n    (vertex 1 2))\n</code></pre>\n",
  :what :macro},
 print-matrix
 {:args #{[]},
  :category "Transform",
  :added "1.0",
  :name print-matrix,
  :subcategory nil,
  :type :clj,
  :processing-name "printMatrix()",
  :requires-bindings true,
  :link "https://processing.org/reference/printMatrix_.html",
  :docstring
  "<p>Prints the current matrix to std out. Useful for debugging.</p>\n",
  :what :fn},
 ambient-light
 {:args
  ({:value [red green blue], :type :both}
   {:value [red green blue x y z], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name ambient-light,
  :subcategory "Lights",
  :type :both,
  :processing-name "ambientLight()",
  :requires-bindings true,
  :link "https://processing.org/reference/ambientLight_.html",
  :docstring
  "<p>Adds an ambient light. Ambient light doesn't come from a specific direction,\nthe rays of light have bounced around so much that objects are\nevenly lit from all sides. Ambient lights are almost always used in\ncombination with other types of lights. Lights need to be included\nin the draw to remain persistent in a looping program. Placing them\nin the setup of a looping program will cause them to only have an\neffect the first time through the loop. The effect of the\nparameters is determined by the current <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>.</p>\n",
  :what :fn},
 bezier-point
 {:args ({:value [a b c d t], :type :both}),
  :category "Shape",
  :added "1.0",
  :name bezier-point,
  :subcategory "Curves",
  :type :both,
  :processing-name "bezierPoint()",
  :requires-bindings true,
  :link "https://processing.org/reference/bezierPoint_.html",
  :docstring
  "<p>Evaluates the Bezier at point <code>t</code> for points <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>. The\nparameter <code>t</code> varies between 0 and 1, <code>a</code> and <code>d</code> are points on the curve,\nand <code>b</code> and <code>c</code> are the control points. This can be done once with the x\ncoordinates and a second time with the y coordinates to get the\nlocation of a bezier curve at <code>t</code>.</p>\n",
  :what :fn},
 quad
 {:args ({:value [x1 y1 x2 y2 x3 y3 x4 y4], :type :both}),
  :category "Shape",
  :added "1.0",
  :name quad,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "quad()",
  :requires-bindings true,
  :link "https://processing.org/reference/quad_.html",
  :docstring
  "<p>A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to\nbe ninety degrees. The first pair of parameters <code>(x1,y1)</code> sets the\nfirst vertex and the subsequent pairs should proceed clockwise or\ncounter-clockwise around the defined shape.</p>\n",
  :what :fn},
 text-style
 {:args #{[style]},
  :category "Typography",
  :added "2.8.0",
  :name text-style,
  :subcategory "Attributes",
  :type :cljs,
  :processing-name "textStyle()",
  :requires-bindings true,
  :link "https://processing.org/reference/textStyle_.html",
  :docstring
  "<p>Sets/gets the style of the text for system fonts to <code>:normal</code>, <code>:italic</code>,\nor <code>:bold</code>. Note: this may be is overridden by CSS styling. For\nnon-system fonts (opentype, truetype, etc.) please load styled fonts\ninstead.</p>\n",
  :what :fn},
 navigation-3d
 {:args ({:value [options], :type :both}),
  :category "Middleware",
  :added "2.2.0",
  :ns "quil.middleware",
  :name navigation-3d,
  :subcategory nil,
  :type :both,
  :requires-bindings false,
  :link nil,
  :docstring
  "<p>Enables navigation in 3D space. Similar to how it is done in\nshooters: WASD navigation, space is go up, drag mouse to look around.\nThis middleware requires fun-mode.</p>\n<p>Navigation</p>\n<ul>\n<li>\n<p>Drag mouse to look around. You can change settings to bind\nmouse-moved instead of mouse-dragged to look around. See\ncustomization info below.</p>\n</li>\n<li>\n<p>Keyboard:</p>\n<ul>\n<li>w - go forward</li>\n<li>s - go backward</li>\n<li>a - strafe left</li>\n<li>d - strafe right</li>\n<li>space - go up</li>\n<li>z - go down, can't bind to ctrl, limitation of Processing</li>\n</ul>\n</li>\n</ul>\n<p>Customization</p>\n<p>You can customize this middleware by providing map as\n:navigation-3d option in defsketch/sketch. Map can have following\noptional keys:</p>\n<p>:position - vector of 3 numbers, initial camera position. Default\nis the same as in 'camera' function.</p>\n<p>:straight - vector of 3 numbers, direction you'll be looking at.\nDefault is [0 0 -1] (looking down).</p>\n<p>:up - vector of 3 numbers, 'up' direction. Default is [0 1 0].</p>\n<p>:pixels-in-360 - number, mouse sensitivity. Defines how many pixels\nyou need to move/drag you mouse to rotate 360 degrees.\nThe less the number the more sensitive is mouse.\nDefault is 1000.</p>\n<p>:step-size - number, number of pixels you move on each key event (wasd).\nDefault is 20.</p>\n<p>:rotate-on - keyword, either :mouse-dragged or :mouse-moved. Specifies\non which mouse event camera should rotate. Default is\n:mouse-dragged.</p>\n<p>Accessing position information from sketch</p>\n<p>navigation-3d uses fun-mode under the hood  so all position-related\ninformation is stored in the state map. It means that you can access in\ndraw/update/any handler and modify it if you need to. Position\ninformation is a map which is stored under :navigation-3d key in the\nstate map. Position consists of 3 values: :position, :straight and :up.\nSee &quot;Customization&quot; section above for more details.</p>\n<p>Usage example:</p>\n<p>(q/defsketch my-sketch\n...\n:middleware [m/fun-mode m/navigation-3d])</p>\n<p>See wiki article for more(?) details:\n<a href=\"https://github.com/quil/quil/wiki/Navigation-3D\">https://github.com/quil/quil/wiki/Navigation-3D</a></p>\n",
  :what :fn},
 lights
 {:args #{[]},
  :category "Lights, Camera",
  :added "1.0",
  :name lights,
  :subcategory "Lights",
  :type :clj,
  :processing-name "lights()",
  :requires-bindings true,
  :link "https://processing.org/reference/lights_.html",
  :docstring
  "<p>Sets the default ambient light, directional light, falloff, and\nspecular values. The defaults are:</p>\n<p><code>(ambient-light 128 128 128)</code>\n<code>(directional-light 128 128 128 0 0 -1)</code>\n<code>(light-falloff 1 0 0)</code>\n<code>(light-specular 0 0 0)</code>.</p>\n<p>Lights need to be included in the draw to remain persistent in a\nlooping program. Placing them in the setup of a looping program\nwill cause them to only have an effect the first time through the\nloop.</p>\n",
  :what :fn},
 cylinder
 {:args
  #{[radius height]
    [radius height detail-x detail-y bottom-cap top-cap]},
  :category "Shape",
  :added "3.0.0",
  :name cylinder,
  :subcategory "3D Primitives",
  :type :cljs,
  :processing-name "cylinder()",
  :requires-bindings true,
  :link "https://processing.org/reference/cylinder_.html",
  :docstring
  "<p>Draw a cylinder with given <code>radius</code> and <code>height</code>.</p>\n",
  :what :fn},
 looping?
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "2.7.2",
  :name looping?,
  :subcategory nil,
  :type :both,
  :processing-name nil,
  :requires-bindings true,
  :link nil,
  :docstring "<p>Returns whether the sketch is looping.</p>\n",
  :what :fn},
 filter-shader
 {:args #{[shader-obj]},
  :category "Image",
  :added "2.0",
  :name filter-shader,
  :subcategory "Pixels",
  :type :clj,
  :processing-name "filter()",
  :requires-bindings true,
  :link "https://processing.org/reference/filter_.html",
  :docstring
  "<p>Originally named filter in Processing Language.\nFilters the display window with given shader (only in <code>:p2d</code> and <code>:p3d</code> modes).</p>\n",
  :what :fn},
 curve-detail
 {:args ({:value [detail], :type :both}),
  :category "Shape",
  :added "1.0",
  :name curve-detail,
  :subcategory "Curves",
  :type :both,
  :processing-name "curveDetail()",
  :requires-bindings true,
  :link "https://processing.org/reference/curveDetail_.html",
  :docstring
  "<p>Sets the resolution at which curves display. The default value is\n20. This function is only useful when using the <code>:p3d</code> or <code>:opengl</code>\nrenderer as the default (<code>:java2d</code>) renderer does not use this\ninformation.</p>\n",
  :what :fn},
 current-frame-rate
 {:args ({:value [], :type :both}),
  :category "Environment",
  :added "1.0",
  :name current-frame-rate,
  :subcategory nil,
  :type :both,
  :processing-name "frameRate",
  :requires-bindings true,
  :link "https://processing.org/reference/frameRate.html",
  :docstring "<p>Returns the current framerate</p>\n",
  :what :fn},
 end-contour
 {:args ({:value [], :type :both}),
  :category "Shape",
  :added "2.0",
  :name end-contour,
  :subcategory "Vertex",
  :type :both,
  :processing-name "endContour()",
  :requires-bindings true,
  :link "https://processing.org/reference/endContour_.html",
  :docstring
  "<p>Use the <a href=\"/api/shape/vertex#begin-contour\">begin-contour</a> and <a href=\"/api/shape/vertex#end-contour\">end-contour</a> function to create negative\nshapes within shapes. These functions can only be within a\n<a href=\"/api/shape/vertex#begin-shape\">begin-shape</a>/<a href=\"/api/shape/vertex#end-shape\">end-shape</a> pair and they only work with the <code>:p2d</code> and <code>:p3d</code>\nrenderers.</p>\n",
  :what :fn},
 sin
 {:args ({:value [angle], :type :both}),
  :category "Math",
  :added "1.0",
  :name sin,
  :subcategory "Trigonometry",
  :type :both,
  :processing-name "sin()",
  :requires-bindings false,
  :link "https://processing.org/reference/sin_.html",
  :docstring
  "<p>Calculates the sine of an angle. This function expects the values\nof the angle parameter to be provided in radians (values from 0 to\n6.28). A <code>float</code> within the range -1 to 1 is returned.</p>\n",
  :what :fn},
 cone
 {:args
  #{[radius height] [radius height detail-x detail-y]
    [radius height detail-x detail-y cap] [radius height detail-x]},
  :category "Shape",
  :added "3.0.0",
  :name cone,
  :subcategory "3D Primitives",
  :type :cljs,
  :processing-name "cone()",
  :requires-bindings true,
  :link "https://processing.org/reference/cone_.html",
  :docstring
  "<p>Draw a cone with given <code>radius</code> and <code>height</code>.</p>\n<pre><code class=\"language-clojure\">  Optional parameters:\n    * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n    * `detail-y` - number of segments, the more segments the smoother geometry default is 24\n    * `cap`      - whether to draw the base of the cone\n</code></pre>\n",
  :what :fn},
 lightness
 {:args #{[c]},
  :category "Color",
  :added "3.0.0",
  :name lightness,
  :subcategory "Creating & Reading",
  :type :cljs,
  :processing-name "lightness()",
  :requires-bindings true,
  :link "https://processing.org/reference/lightness_.html",
  :docstring
  "<p>Extracts the HSL lightness value from a color or pixel array.</p>\n",
  :what :fn},
 current-stroke
 {:args ({:value [], :type :both}),
  :category "Color",
  :name current-stroke,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "PGraphics.strokeColor",
  :processing-link
  "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor",
  :requires-bindings true,
  :link
  "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor",
  :docstring "<p>Return the current stroke color.</p>\n",
  :what :fn},
 curve
 {:args
  ({:value [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4], :type :both}
   {:value [x1 y1 x2 y2 x3 y3 x4 y4], :type :both}),
  :category "Shape",
  :added "1.0",
  :name curve,
  :subcategory "Curves",
  :type :both,
  :processing-name "curve()",
  :requires-bindings true,
  :link "https://processing.org/reference/curve_.html",
  :docstring
  "<p>Draws a curved line on the screen. The first and second parameters\nspecify the beginning control point and the last two parameters\nspecify the ending control point. The middle parameters specify the\nstart and stop of the curve. Longer curves can be created by putting\na series of curve functions together or using <a href=\"/api/shape/vertex#curve-vertex\">curve-vertex</a>. An additional\nfunction called <a href=\"/api/shape/curves#curve-tightness\">curve-tightness</a> provides control for the visual quality\nof the curve. The <a href=\"/api/shape/curves#curve\">curve</a> function is an implementation of Catmull-Rom\nsplines.</p>\n",
  :what :fn},
 shape
 {:args
  ({:value [sh x y width height], :type :clj}
   {:value [sh x y], :type :clj}
   {:value [sh], :type :both}),
  :category "Shape",
  :added "1.0",
  :name shape,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "shape()",
  :requires-bindings true,
  :link "https://processing.org/reference/shape_.html",
  :docstring
  "<p>Displays shapes to the screen. The shapes must have been loaded\nwith <a href=\"/api/shape/loading-and-displaying#load-shape\">load-shape</a>. Processing currently works with SVG shapes\nonly. The <code>sh</code> parameter specifies the shape to display and the <code>x</code> and\n<code>y</code> parameters define the location of the shape from its upper-left\ncorner. The shape is displayed at its original size unless the <code>width</code>\nand <code>height</code> parameters specify a different size. The <a href=\"/api/shape/loading-and-displaying#shape-mode\">shape-mode</a>\nfunction changes the way the parameters work. A call to\n<code>(shape-mode :corners)</code> for example, will change the width and height\nparameters to define the x and y values of the opposite corner of\nthe shape.</p>\n<p>Note complex shapes may draw awkwardly with the renderers <code>:p2d</code>, <code>:p3d</code>, and\n<code>:opengl</code>. Those renderers do not yet support shapes that have holes\nor complicated breaks.</p>\n",
  :what :fn},
 text-descent
 {:args ({:value [], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-descent,
  :subcategory "Metrics",
  :type :both,
  :processing-name "textDescent()",
  :requires-bindings true,
  :link "https://processing.org/reference/textDescent_.html",
  :docstring
  "<p>Returns descent of the current font at its current size. This\ninformation is useful for determining the height of the font below\nthe baseline. For example, adding the <a href=\"/api/typography/metrics#text-ascent\">text-ascent</a> and <a href=\"/api/typography/metrics#text-descent\">text-descent</a>\nvalues will give you the total height of the line.</p>\n",
  :what :fn},
 ellipse
 {:args ({:value [x y width height], :type :both}),
  :category "Shape",
  :added "1.0",
  :name ellipse,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "ellipse()",
  :requires-bindings true,
  :link "https://processing.org/reference/ellipse_.html",
  :docstring
  "<p>Draws an ellipse (oval) in the display window. An ellipse with an\nequal <code>width</code> and <code>height</code> is a circle. The origin may be changed with\nthe <a href=\"/api/shape/attributes#ellipse-mode\">ellipse-mode</a> function.</p>\n",
  :what :fn},
 text-leading
 {:args ({:value [leading], :type :both}),
  :category "Typography",
  :added "1.0",
  :name text-leading,
  :subcategory "Attributes",
  :type :both,
  :processing-name "textLeading()",
  :requires-bindings true,
  :link "https://processing.org/reference/textLeading_.html",
  :docstring
  "<p>Sets the spacing between lines of text in units of pixels. This\nsetting will be used in all subsequent calls to the <a href=\"/api/typography/loading-and-displaying#text\">text</a> function.</p>\n",
  :what :fn},
 image-filter
 {:args
  ({:value [img mode], :type :both}
   {:value [img mode level], :type :both}),
  :category "Image",
  :added "2.0",
  :name image-filter,
  :subcategory "Pixels",
  :type :both,
  :processing-name "PImage.filter()",
  :requires-bindings true,
  :link "https://processing.org/reference/PImage_filter_.html",
  :docstring
  "<p>Originally named filter in Processing Language.\nFilters given image with the specified <code>mode</code> and <code>level</code>.\n<code>level</code> defines the quality of the filter and <code>mode</code> may be one of\nthe following keywords:</p>\n<ul>\n<li><code>:threshold</code> - converts the image to black and white pixels depending\nif they are above or below the threshold defined by\nthe level parameter. The level must be between\n0.0 (black) and 1.0 (white). If no level is specified,\n0.5 is used.</li>\n<li><code>:gray</code>      - converts any colors in the image to grayscale\nequivalents. Doesn't work with level.</li>\n<li><code>:invert</code>    - sets each pixel to its inverse value. Doesn't work with\nlevel.</li>\n<li><code>:posterize</code> - limits each channel of the image to the number of\ncolors specified as the level parameter. The parameter can\nbe set to values between 2 and 255, but results are most\nnoticeable in the lower ranges.</li>\n<li><code>:blur</code>      - executes a Gaussian blur with the <code>level</code> parameter\nspecifying the extent of the blurring. If no level\nparameter is used, the blur is equivalent to Gaussian\nblur of radius 1.</li>\n<li><code>:opaque</code>    - sets the alpha channel to entirely opaque. Doesn't work\nwith level.</li>\n<li><code>:erode</code>     - reduces the light areas. Doesn't work with <code>level</code>.</li>\n<li><code>:dilate</code>    - increases the light areas. Doesn't work with <code>level</code>.</li>\n</ul>\n",
  :what :fn},
 random
 {:args ({:value [max], :type :both} {:value [min max], :type :both}),
  :category "Math",
  :added "1.0",
  :name random,
  :subcategory "Random",
  :type :both,
  :processing-name "random()",
  :requires-bindings true,
  :link "https://processing.org/reference/random_.html",
  :docstring
  "<p>Generates random numbers. Each time the random function is called,\nit returns an unexpected value within the specified range. If one\nparameter is passed to the function it will return a <code>float</code> between\nzero and the value of the high parameter. The function call <code>(random 5)</code> returns values between 0 and 5 (starting at zero, up to but not\nincluding 5). If two parameters are passed, it will return a <code>float</code>\nwith a value between the parameters. The function call\n<code>(random -5 10.2)</code> returns values starting at -5 up to (but not\nincluding) 10.2.</p>\n",
  :what :fn},
 texture-mode
 {:args #{[mode]},
  :category "Shape",
  :added "1.0",
  :name texture-mode,
  :subcategory "Vertex",
  :type :clj,
  :processing-name "textureMode()",
  :requires-bindings true,
  :link "https://processing.org/reference/textureMode_.html",
  :docstring
  "<p>Sets the coordinate space for texture mapping. There are two\noptions, <code>:image</code> and <code>:normal</code>.</p>\n<p><code>:image</code> refers to the actual coordinates of the image and <code>:normal</code>\nrefers to a normalized space of values ranging from 0 to 1. The\ndefault <code>mode</code> is <code>:image</code>. In <code>:image</code>, if an image is 100 x 200 pixels,\nmapping the image onto the entire size of a quad would require the\npoints <code>(0,0) (0,100) (100,200) (0,200)</code>. The same mapping in\nNORMAL_SPACE is <code>(0,0) (0,1) (1,1) (0,1)</code>.</p>\n",
  :what :fn},
 redraw
 {:args ({:value [n], :type :cljs} {:value [], :type :both}),
  :category "Structure",
  :added "1.0",
  :name redraw,
  :subcategory nil,
  :type :both,
  :processing-name "redraw()",
  :requires-bindings true,
  :link "https://processing.org/reference/redraw_.html",
  :docstring
  "<p>Executes the code within the <code>draw</code> function one time (or n times in cljs).\nThis function allows the program to update the display window only\nwhen necessary, for example when an event registered by <a href=\"/api/input/mouse#mouse-pressed?\">mouse-pressed?</a> or\n<a href=\"/api/input/keyboard#key-pressed?\">key-pressed?</a> occurs.</p>\n<p>In structuring a program, it only makes sense to call <a href=\"/api/structure#redraw\">redraw</a>\nwithin events such as <a href=\"/api/input/mouse#mouse-pressed?\">mouse-pressed?</a>. This is because <a href=\"/api/structure#redraw\">redraw</a> does\nnot run draw immediately (it only sets a flag that indicates an\nupdate is needed).</p>\n<p>Calling <a href=\"/api/structure#redraw\">redraw</a> within <code>draw</code> has no effect because <code>draw</code> is\ncontinuously called anyway.</p>\n",
  :what :fn},
 get-pixel
 {:args
  ({:value [img x y w h], :type :both}
   {:value [x y w h], :type :both}
   {:value [img], :type :both}
   {:value [], :type :both}
   {:value [img x y], :type :both}
   {:value [x y], :type :both}),
  :category "Image",
  :added "1.0",
  :name get-pixel,
  :subcategory "Pixels",
  :type :both,
  :processing-name "get()",
  :requires-bindings true,
  :link "https://processing.org/reference/get_.html",
  :docstring
  "<p>Reads the color of any pixel or grabs a section of an image. If no\nparameters are specified, a copy of entire image is returned. Get the\nvalue of one pixel by specifying an <code>x</code>,<code>y</code> coordinate. Get a section of\nthe image by specifying an additional <code>width</code> and <code>height</code> parameter.\nIf the pixel requested is outside of the image window, black is returned.\nThe numbers returned are scaled according to the current color ranges,\nbut only RGB values are returned by this function. For example, even though\nyou may have drawn a shape with <code>(color-mode :hsb)</code>, the numbers returned\nwill be in RGB.</p>\n<p>Getting the color of a single pixel with <code>(get x y)</code> is easy, but not\nas fast as grabbing the data directly using the <a href=\"/api/image/pixels#pixels\">pixels</a> function.</p>\n<p>If no <code>img</code> specified - <a href=\"/api/environment#current-graphics\">current-graphics</a> is used.</p>\n",
  :what :fn},
 rotate
 {:args
  ({:value [angle], :type :both}
   {:value [angle vx vy vz], :type :both}),
  :category "Transform",
  :added "1.0",
  :name rotate,
  :subcategory nil,
  :type :both,
  :processing-name "rotate()",
  :requires-bindings true,
  :link "https://processing.org/reference/rotate_.html",
  :docstring
  "<p>Rotates a shape the amount specified by the <code>angle</code> parameter. Angles\nshould be specified in radians (values from 0 to TWO-PI) or\nconverted to radians with the <a href=\"/api/math/trigonometry#radians\">radians</a> function.</p>\n<p>Objects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise\ndirection. Transformations apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For\nexample, calling <code>(rotate HALF-PI)</code> and then <code>(rotate HALF-PI)</code> is the\nsame as <code>(rotate PI)</code>. All transformations are reset when draw begins\nagain.</p>\n<p>Technically, rotate multiplies the current transformation matrix by\na rotation matrix. This function can be further controlled by the\n<a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> functions.</p>\n<p>When 4 arguments are provided it produces a rotation of <code>angle</code> degrees\naround the vector <code>vx</code> <code>vy</code> <code>vz</code>. Check examples to better understand.\nThis rotation follows the right-hand rule, so if the vector x y z points\ntoward the user, the rotation will be counterclockwise.</p>\n",
  :what :fn},
 set-pixel
 {:args
  ({:value [x y c], :type :both} {:value [img x y c], :type :both}),
  :category "Image",
  :added "1.0",
  :name set-pixel,
  :subcategory "Pixels",
  :type :both,
  :processing-name "set()",
  :requires-bindings true,
  :link "https://processing.org/reference/set_.html",
  :docstring
  "<p>Changes the color of any pixel in the display window. The <code>x</code> and <code>y</code>\nparameters specify the pixel to change and the <code>c</code> parameter\nspecifies the color value. The color parameter is affected by the\ncurrent <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a> (the default is RGB values from 0 to 255).</p>\n<p>Setting the color of a single pixel with <code>(set-pixel x y)</code> is easy, but not\nas fast as putting the data directly into <a href=\"/api/image/pixels#pixels\">pixels</a>.</p>\n<p>This function ignores <a href=\"/api/image/loading-and-displaying#image-mode\">image-mode</a>.</p>\n<p>Due to what appears to be a bug in Apple's Java implementation, the\n<a href=\"/api/shape/2d-primitives#point\">point</a> and <a href=\"/api/image/pixels#set-pixel\">set-pixel</a> methods are extremely slow in some circumstances\nwhen used with the default renderer. Using <code>:p2d</code> or <code>:p3d</code> will fix the\nproblem. Grouping many calls to <a href=\"/api/shape/2d-primitives#point\">point</a> or <a href=\"/api/image/pixels#set-pixel\">set-pixel</a> together can also\nhelp. (Bug 1094)</p>\n",
  :what :fn},
 push-matrix
 {:args ({:value [], :type :both}),
  :category "Transform",
  :added "1.0",
  :name push-matrix,
  :subcategory nil,
  :type :both,
  :processing-name "pushMatrix()",
  :requires-bindings true,
  :link "https://processing.org/reference/pushMatrix_.html",
  :docstring
  "<p>Pushes the current transformation matrix onto the matrix\nstack. Understanding [<a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> requires\nunderstanding the concept of a matrix stack. The <a href=\"/api/transform#push-matrix\">push-matrix</a>\nfunction saves the current coordinate system to the stack and\n<a href=\"/api/transform#pop-matrix\">pop-matrix</a> restores the prior coordinate system. <a href=\"/api/transform#push-matrix\">push-matrix</a> and\n<a href=\"/api/transform#pop-matrix\">pop-matrix</a> are used in conjunction with the other transformation\nmethods and may be embedded to control the scope of the\ntransformations.</p>\n",
  :what :fn},
 no-smooth
 {:args ({:value [], :type :both}),
  :category "Shape",
  :added "1.0",
  :name no-smooth,
  :subcategory "Attributes",
  :type :both,
  :processing-name "noSmooth()",
  :requires-bindings true,
  :link "https://processing.org/reference/noSmooth_.html",
  :docstring
  "<p>Draws all geometry with jagged (aliased) edges. Must be called inside\n<code>:settings</code> handler.</p>\n",
  :what :fn},
 alpha
 {:args ({:value [color], :type :both}),
  :category "Color",
  :added "1.0",
  :name alpha,
  :subcategory "Creating & Reading",
  :type :both,
  :processing-name "alpha()",
  :requires-bindings true,
  :link "https://processing.org/reference/alpha_.html",
  :docstring "<p>Extracts the alpha value from a color.</p>\n",
  :what :fn},
 camera
 {:args
  ({:value [], :type :both}
   {:value [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ],
    :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name camera,
  :subcategory "Camera",
  :type :both,
  :processing-name "camera()",
  :requires-bindings true,
  :link "https://processing.org/reference/camera_.html",
  :docstring
  "<p>Sets the position of the camera through setting the eye position,\nthe center of the scene, and which axis is facing upward. Moving the\neye position and the direction it is pointing (the center of the\nscene) allows the images to be seen from different angles. The\nversion without any parameters sets the camera to the default\nposition, pointing to the center of the display window with the Y\naxis as up. The default values are:</p>\n<ul>\n<li><code>eyeX</code>    - <code>(/ (width) 2.0)</code></li>\n<li><code>eyeY</code>    - <code>(/ (height) 2.0)</code></li>\n<li><code>eyeZ</code>    - <code>(/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))</code></li>\n<li><code>centerX</code> - <code>(/ (width) 2.0)</code></li>\n<li><code>centerY</code> - <code>(/ (height) 2.0)</code></li>\n<li><code>centerZ</code> - <code>0</code></li>\n<li><code>upX</code>     - <code>0</code></li>\n<li><code>upY</code>     - <code>1</code></li>\n<li><code>upZ</code>     - <code>0</code></li>\n</ul>\n<p>Similar to <code>gluLookAt()</code> in OpenGL, but it first clears the\ncurrent camera settings.</p>\n",
  :what :fn},
 translate
 {:args
  ({:value [tx ty tz], :type :both}
   {:value [tx ty], :type :both}
   {:value [v], :type :both}),
  :category "Transform",
  :added "1.0",
  :name translate,
  :subcategory nil,
  :type :both,
  :processing-name "translate()",
  :requires-bindings true,
  :link "https://processing.org/reference/translate_.html",
  :docstring
  "<p>Specifies an amount to displace objects within the display\nwindow. The <code>tx</code> parameter specifies left/right translation, the <code>ty</code>\nparameter specifies up/down translation, and the <code>tz</code> parameter\nspecifies translations toward/away from the screen.  Transformations\napply to everything that happens after and subsequent calls to the\nfunction accumulates the effect. For example, calling <code>(translate 50 0)</code> and then <code>(translate 20, 0)</code> is the same as <code>(translate 70, 0)</code>. If\n<a href=\"/api/transform#translate\">translate</a> is called within draw, the transformation is reset when\nthe loop begins again. This function can be further controlled by\nthe <a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> functions.</p>\n",
  :what :fn},
 load-font
 {:args ({:value [filename], :type :both}),
  :category "Typography",
  :added "1.0",
  :name load-font,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "loadFont()",
  :requires-bindings true,
  :link "https://processing.org/reference/loadFont_.html",
  :docstring
  "<p>Loads a font into a variable of type <code>PFont</code>. To load correctly,\nfonts must be located in the data directory of the current sketch.\nTo create a font to use with Processing use the <a href=\"/api/typography/loading-and-displaying#create-font\">create-font</a> function.</p>\n<p>Like <a href=\"/api/image/loading-and-displaying#load-image\">load-image</a> and other methods that load data, the <a href=\"/api/typography/loading-and-displaying#load-font\">load-font</a>\nfunction should not be used inside draw, because it will slow down the sketch\nconsiderably, as the font will be re-loaded from the disk (or\nnetwork) on each frame.</p>\n<p>For most renderers, Processing displays fonts using the <code>.vlw</code> font\nformat, which uses images for each letter, rather than defining them\nthrough vector data. When hint <code>:enable-native-fonts</code> is used with the\nJAVA2D renderer, the native version of a font will be used if it is\ninstalled on the user's machine.</p>\n<p>Using <a href=\"/api/typography/loading-and-displaying#create-font\">create-font</a> (instead of <a href=\"/api/typography/loading-and-displaying#load-font\">load-font</a>) enables vector data to be\nused with the JAVA2D (default) renderer setting. This can be helpful\nwhen many font sizes are needed, or when using any renderer based on\nJAVA2D, such as the PDF library.</p>\n",
  :what :fn},
 ambient
 {:args ({:value [gray], :type :both} {:value [r g b], :type :both}),
  :category "Lights, Camera",
  :added "1.0",
  :name ambient,
  :subcategory "Material Properties",
  :type :both,
  :processing-name "ambient()",
  :requires-bindings true,
  :link "https://processing.org/reference/ambient_.html",
  :docstring
  "<p>Sets the ambient reflectance for shapes drawn to the screen. This\nis combined with the ambient light component of environment. The\ncolor components set through the parameters define the\nreflectance. For example in the default <a href=\"/api/color/creating-and-reading#color-mode\">color-mode</a>, setting <code>r=255, g=126, b=0</code>, would cause all the red light to reflect and half of the\ngreen light to reflect. Used in combination with <a href=\"/api/lights-camera/material-properties#emissive\">emissive</a>, <a href=\"/api/lights-camera/material-properties#specular\">specular</a>,\nand <a href=\"/api/lights-camera/material-properties#shininess\">shininess</a> in setting the material properties of shapes.</p>\n",
  :what :fn},
 shear-y
 {:args ({:value [angle], :type :both}),
  :category "Transform",
  :added "1.0",
  :name shear-y,
  :subcategory nil,
  :type :both,
  :processing-name "shearY()",
  :requires-bindings true,
  :link "https://processing.org/reference/shearY_.html",
  :docstring
  "<p>Shears a shape around the y-axis the amount specified by the <code>angle</code>\nparameter. Angles should be specified in radians (values from 0 to\nPI*2) or converted to radians with the <a href=\"/api/math/trigonometry#radians\">radians</a> function. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\nTransformations apply to everything that happens after and\nsubsequent calls to the function accumulates the effect. For\nexample, calling <code>(shear-y (/ PI 2))</code> and then <code>(shear-y (/ PI 2))</code> is\nthe same as <code>(shear-y PI)</code>. If <a href=\"/api/transform#shear-y\">shear-y</a> is called within the draw\nfunction, the transformation is reset when the loop begins again. This\nfunction works in P2D or JAVA2D mode.</p>\n<p>Technically, <a href=\"/api/transform#shear-y\">shear-y</a> multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by the\n<a href=\"/api/transform#push-matrix\">push-matrix</a> and <a href=\"/api/transform#pop-matrix\">pop-matrix</a> functions.</p>\n",
  :what :fn},
 mouse-y
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name mouse-y,
  :subcategory "Mouse",
  :type :both,
  :processing-name "mouseY",
  :requires-bindings true,
  :link "https://processing.org/reference/mouseY.html",
  :docstring "<p>Current vertical coordinate of the mouse.</p>\n",
  :what :fn},
 mouse-button
 {:args ({:value [], :type :both}),
  :category "Input",
  :added "1.0",
  :name mouse-button,
  :subcategory "Mouse",
  :type :both,
  :processing-name "mouseButton",
  :requires-bindings true,
  :link "https://processing.org/reference/mouseButton.html",
  :docstring
  "<p>The value of the system variable mouseButton is either <code>:left</code>, <code>:right</code>,\nor <code>:center</code> depending on which button is pressed. <code>nil</code> if no button pressed</p>\n",
  :what :fn},
 image
 {:args
  ({:value [img x y], :type :both}
   {:value [img x y c d], :type :both}),
  :category "Image",
  :added "1.0",
  :name image,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "image()",
  :requires-bindings true,
  :link "https://processing.org/reference/image_.html",
  :docstring
  "<p>Displays images to the screen. Processing currently works with GIF,\nJPEG, and Targa images. The color of an image may be modified with\nthe <a href=\"/api/image/loading-and-displaying#tint\">tint</a> function and if a GIF has transparency, it will maintain\nits transparency. The <code>img</code> parameter specifies the image to display\nand the <code>x</code> and <code>y</code> parameters define the location of the image from its\nupper-left corner. The image is displayed at its original size\nunless the width and height parameters specify a different size. The\n<a href=\"/api/image/loading-and-displaying#image-mode\">image-mode</a> function changes the way the parameters work. A call to\n<code>(image-mode :corners)</code> will change the <code>width</code> and <code>height</code> parameters to\ndefine the x and y values of the opposite corner of the image.</p>\n",
  :what :fn},
 unbinary
 {:args ({:value [str-val], :type :both}),
  :category "Data",
  :require-binding false,
  :added "1.0",
  :name unbinary,
  :subcategory "Conversion",
  :type :both,
  :processing-name "unbinary()",
  :link "https://processing.org/reference/unbinary_.html",
  :docstring
  "<p>Unpack a binary string to an integer. See <a href=\"/api/data/conversion#binary\">binary</a> for converting\nintegers to strings.</p>\n",
  :what :fn},
 no-tint
 {:args ({:value [], :type :both}),
  :category "Image",
  :added "1.0",
  :name no-tint,
  :subcategory "Loading & Displaying",
  :type :both,
  :processing-name "noTint()",
  :requires-bindings true,
  :link "https://processing.org/reference/noTint_.html",
  :docstring
  "<p>Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.</p>\n",
  :what :fn},
 no-lights
 {:args #{[]},
  :category "Lights, Camera",
  :added "1.0",
  :name no-lights,
  :subcategory "Lights",
  :type :clj,
  :processing-name "noLights()",
  :requires-bindings true,
  :link "https://processing.org/reference/noLights_.html",
  :docstring
  "<p>Disable all lighting. Lighting is turned off by default and enabled\nwith the <a href=\"/api/lights-camera/lights#lights\">lights</a> function. This function can be used to disable lighting so\nthat 2D geometry (which does not require lighting) can be drawn\nafter a set of lighted 3D geometry.</p>\n",
  :what :fn},
 point
 {:args ({:value [x y], :type :both} {:value [x y z], :type :both}),
  :category "Shape",
  :added "1.0",
  :name point,
  :subcategory "2D Primitives",
  :type :both,
  :processing-name "point()",
  :requires-bindings true,
  :link "https://processing.org/reference/point_.html",
  :docstring
  "<p>Draws a point, a coordinate in space at the dimension of one\npixel.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>x</code> - the horizontal value for the point</li>\n<li><code>y</code> - the vertical value for the point</li>\n<li><code>z</code> - the depth value (optional)</li>\n</ul>\n<p>Drawing this shape in 3D using the <code>z</code> parameter requires the <code>:p3d</code>\nor <code>:opengl</code> renderer to be used.</p>\n",
  :what :fn}}
